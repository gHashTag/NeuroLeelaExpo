import { describe, it, expect } from 'vitest';
import { GameMessageService, GameContext } from '../../services/GameMessageService';

describe('GameMessageService', () => {
  describe('generateMessage', () => {
    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', () => {
      const context: GameContext = {
        currentPlan: 68,
        previousPlan: 68,
        roll: 3,
        direction: 'stop üõë',
        isFinished: true,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('start');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üé≤');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ–≤
      expect(
        message.text.includes('6') || 
        message.text.includes('—à–µ—Å—Ç–µ—Ä–∫–∞') || 
        message.text.includes('–®–µ—Å—Ç–µ—Ä–∫–∞')
      ).toBe(true);
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞', () => {
      const context: GameContext = {
        currentPlan: 6,
        previousPlan: 68,
        roll: 6,
        direction: 'step üö∂üèº',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('move');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üåü');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤', () => {
      const context: GameContext = {
        currentPlan: 10,
        previousPlan: 5,
        roll: 5,
        direction: 'regular_move',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('special');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üßò');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–µ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∞ 10
      expect(
        message.text.includes('–û—á–∏—â–µ–Ω–∏–µ') || 
        message.text.includes('–æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è') ||
        message.text.includes('–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö') ||
        message.text.includes('–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é')
      ).toBe(true);
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–º–µ–∏', () => {
      const context: GameContext = {
        currentPlan: 15, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        previousPlan: 20,
        roll: 4,
        direction: 'snake üêç',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      // –ü–ª–∞–Ω 15 –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ fallback –ª–æ–≥–∏–∫—É
      expect(message.type).toBe('special');
      expect(message.spiritual).toBe(true);
      expect(message.text).toBeTruthy();
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–µ–ª—ã', () => {
      const context: GameContext = {
        currentPlan: 23,
        previousPlan: 10,
        roll: 2,
        direction: 'arrow üèπ',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('arrow');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üèπ');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥—ã', () => {
      const context: GameContext = {
        currentPlan: 67,
        previousPlan: 65,
        roll: 3,
        direction: 'win üïâ',
        isFinished: true,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('win');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üïâÔ∏è');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', () => {
      const context: GameContext = {
        currentPlan: 70,
        previousPlan: 70,
        roll: 5,
        direction: 'stop üõë',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('stop');
      expect(message.spiritual).toBe(true);
      expect(message.text).toContain('üõë');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ö–æ–¥–æ–≤', () => {
      // –†–∞–Ω–Ω–∏–π —ç—Ç–∞–ø (1-24)
      const earlyContext: GameContext = {
        currentPlan: 15,
        previousPlan: 10,
        roll: 5,
        direction: 'step üö∂üèº',
        isFinished: false,
        consecutiveSixes: 0
      };

      const earlyMessage = GameMessageService.generateMessage(earlyContext);
      expect(earlyMessage.type).toBe('step');
      expect(earlyMessage.spiritual).toBe(true);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è step
      expect(
        earlyMessage.text.includes('—à–∞–≥') || 
        earlyMessage.text.includes('–ø—É—Ç—å') ||
        earlyMessage.text.includes('—Ä–æ—Å—Ç') ||
        earlyMessage.text.includes('–¥—É—à–∞') ||
        earlyMessage.text.includes('–ø—Ä–æ—Ü–µ—Å—Å')
      ).toBe(true);

      // –°—Ä–µ–¥–Ω–∏–π —ç—Ç–∞–ø (25-48) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      const middleContext: GameContext = {
        currentPlan: 35,
        previousPlan: 30,
        roll: 5,
        direction: 'step üö∂üèº',
        isFinished: false,
        consecutiveSixes: 0
      };

      const middleMessage = GameMessageService.generateMessage(middleContext);
      expect(middleMessage.type).toBe('step');

      // –ü–æ–∑–¥–Ω–∏–π —ç—Ç–∞–ø (49-72) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      const lateContext: GameContext = {
        currentPlan: 60,
        previousPlan: 55,
        roll: 5,
        direction: 'step üö∂üèº',
        isFinished: false,
        consecutiveSixes: 0
      };

      const lateMessage = GameMessageService.generateMessage(lateContext);
      expect(lateMessage.type).toBe('step');
    });

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', () => {
      const context: GameContext = {
        currentPlan: 15,
        previousPlan: 10,
        roll: 5,
        direction: 'unknown_direction',
        isFinished: false,
        consecutiveSixes: 0
      };

      const message = GameMessageService.generateMessage(context);
      
      expect(message.type).toBe('move');
      expect(message.text).toContain('–ü–ª–∞–Ω 15');
    });
  });

  describe('getWelcomeMessage', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', () => {
      const message = GameMessageService.getWelcomeMessage();
      
      expect(message).toContain('üïâÔ∏è');
      expect(message.toLowerCase()).toContain('–ª–∏–ª');
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', () => {
      const messages = new Set();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
      for (let i = 0; i < 20; i++) {
        messages.add(GameMessageService.getWelcomeMessage());
      }
      
      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      expect(messages.size).toBeGreaterThan(1);
    });
  });
}); 