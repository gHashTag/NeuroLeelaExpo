import { describe, it, expect, vi, beforeEach } from 'vitest';

// –ú–æ–∫ –¥–ª—è fetch
global.fetch = vi.fn();

describe('ChatBot AI Integration', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API', async () => {
    const mockResponse = {
      choices: [{
        message: {
          content: '–ù–∞–º–∞—Å—Ç–µ! –ü–ª–∞–Ω 1 - —ç—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏.'
        }
      }]
    };

    (fetch as any).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve(mockResponse)
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const userMessage = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–ª–∞–Ω–µ 1';
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer test-api-key',
        'HTTP-Referer': 'https://neurolila.app',
        'X-Title': 'NeuroLila Game'
      },
      body: JSON.stringify({
        model: 'meta-llama/llama-3.1-8b-instruct:free',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –õ–∏–ª–∞, –±–æ–≥–∏–Ω—è –∏–≥—Ä—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è'
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    expect(fetch).toHaveBeenCalledWith(
      'https://openrouter.ai/api/v1/chat/completions',
      expect.objectContaining({
        method: 'POST',
        headers: expect.objectContaining({
          'Authorization': 'Bearer test-api-key'
        })
      })
    );

    const data = await response.json();
    expect(data.choices[0].message.content).toContain('–ü–ª–∞–Ω 1');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API', async () => {
    (fetch as any).mockResolvedValueOnce({
      ok: false,
      status: 401
    });

    try {
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions');
      if (!response.ok) {
        throw new Error(`OpenRouter API error: ${response.status}`);
      }
    } catch (error: any) {
      expect(error.message).toBe('OpenRouter API error: 401');
    }
  });

  it('–¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–æ–º–µ—Ä –ø–ª–∞–Ω–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò', () => {
    const testCases = [
      { text: '–ü–ª–∞–Ω 10 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—á–∏—â–µ–Ω–∏–µ', expected: 10 },
      { text: '–ü–æ–∑–∏—Ü–∏—è 23 - —ç—Ç–æ –Ω–µ–±–µ—Å–∞', expected: 23 },
      { text: '68 –ø–ª–∞–Ω –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è', expected: 68 },
      { text: '–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –ø–ª–∞–Ω–µ 1', expected: 1 },
      { text: '–ù–∏–∫–∞–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –∑–¥–µ—Å—å –Ω–µ—Ç', expected: null }
    ];

    testCases.forEach(({ text, expected }) => {
      const planMatch = text.match(/–ø–ª–∞–Ω[–∞-—è\s]*(\d+)|–ø–æ–∑–∏—Ü–∏[–∞-—è\s]*(\d+)|(\d+)[–∞-—è\s]*–ø–ª–∞–Ω/i);
      const planNumber = planMatch ? parseInt(planMatch[1] || planMatch[2] || planMatch[3]) : null;
      
      expect(planNumber).toBe(expected);
    });
  });

  it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∞—Ö', () => {
    // –§—É–Ω–∫—Ü–∏—è getPlanInfo (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const getPlanInfo = (planNumber: number) => {
      const plansData: Record<number, { name: string; description: string; element: string; color: string }> = {
        1: { name: "–†–æ–∂–¥–µ–Ω–∏–µ", description: "–ù–∞—á–∞–ª–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏, –ø–µ—Ä–≤–æ–µ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –¥—É—à–∏", element: "üå±", color: "green" },
        68: { name: "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ", description: "–í—ã—Å—à–µ–µ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∏ –µ–¥–∏–Ω—Å—Ç–≤–æ —Å –ê–±—Å–æ–ª—é—Ç–æ–º", element: "üïâÔ∏è", color: "violet" }
      };
      
      return plansData[planNumber] || {
        name: `–ü–ª–∞–Ω ${planNumber}`,
        description: "–û—Å–æ–±—ã–π —ç—Ç–∞–ø –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é",
        element: "‚ú®",
        color: "blue"
      };
    };

    const plan1 = getPlanInfo(1);
    expect(plan1.name).toBe("–†–æ–∂–¥–µ–Ω–∏–µ");
    expect(plan1.element).toBe("üå±");
    expect(plan1.color).toBe("green");

    const plan42 = getPlanInfo(42);
    expect(plan42.name).toBe("–ü–ª–∞–Ω 42");
    expect(plan42.element).toBe("‚ú®");
    expect(plan42.color).toBe("blue");
  });

  it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å tool invocation –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞', () => {
    const planNumber = 10;
    const planInfo = {
      name: "–û—á–∏—â–µ–Ω–∏–µ",
      description: "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤",
      element: "üßò",
      color: "blue"
    };

    const toolInvocation = {
      toolCallId: `ai-${Date.now()}`,
      toolName: 'createPlanCard',
      state: 'result',
      result: {
        type: 'plan-card',
        planNumber,
        planInfo,
        isCurrentPosition: false,
        timestamp: new Date().toISOString()
      }
    };

    expect(toolInvocation.toolName).toBe('createPlanCard');
    expect(toolInvocation.result.planNumber).toBe(10);
    expect(toolInvocation.result.planInfo.name).toBe("–û—á–∏—â–µ–Ω–∏–µ");
  });
}); 