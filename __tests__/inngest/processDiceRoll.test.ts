import { describe, it, expect, beforeEach } from 'vitest';
import { Inngest } from 'inngest';
import { InngestTestEngine } from '@inngest/test';
import { processDiceRoll } from '../../inngest/server-functions';
import type { DiceRollFunctionResponse } from '../../types/schemas';
import './setup';

describe('ProcessDiceRoll Function', () => {
  let testEngine: InngestTestEngine;

  beforeEach(() => {
    testEngine = new InngestTestEngine({
      function: processDiceRoll
    });
  });

  describe('üé≤ –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞', () => {
    it('should process dice roll and return valid response', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-1',
          roll: 4
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-1',
              roll: 4
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              id: 'test-user-1',
              plan: 15,
              previous_plan: 11,
              isFinished: false,
              consecutiveSixes: 0,
              positionBeforeThreeSixes: 0,
              needsReport: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 19,
                previous_loka: 15,
                direction: 'step üö∂üèº',
                consecutive_sixes: 0,
                position_before_three_sixes: 0,
                is_finished: false
              },
              direction: '–û–±—ã—á–Ω—ã–π —Ö–æ–¥',
              message: '–û–±—ã—á–Ω—ã–π —Ö–æ–¥ —Å 15 –Ω–∞ 19'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-1',
              roll: 4,
              gameResult: {
                gameStep: {
                  loka: 19,
                  previous_loka: 15,
                  direction: 'step üö∂üèº',
                  consecutive_sixes: 0,
                  position_before_three_sixes: 0,
                  is_finished: false
                },
                direction: '–û–±—ã—á–Ω—ã–π —Ö–æ–¥',
                message: '–û–±—ã—á–Ω—ã–π —Ö–æ–¥ —Å 15 –Ω–∞ 19'
              },
              message: 'Dice roll 4 processed successfully'
            })
          }
        ]
      });

      // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.success).toBe(true);
      expect(typedResult.userId).toBe('test-user-1');
      expect(typedResult.roll).toBe(4);
      expect(typedResult.gameResult.gameStep.loka).toBe(19);
      expect(typedResult.gameResult.gameStep.previous_loka).toBe(15);
      expect(typedResult.gameResult.gameStep.is_finished).toBe(false);
      expect(typedResult.message).toBe('Dice roll 4 processed successfully');
    });

    it('should handle game start (roll 6 from position 68)', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-2',
          roll: 6
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-2',
              roll: 6
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              id: 'test-user-2',
              plan: 68,
              previous_plan: 0,
              isFinished: true, // –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
              consecutiveSixes: 0,
              positionBeforeThreeSixes: 0,
              needsReport: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 6, // START_LOKA
                previous_loka: 68,
                direction: 'step üö∂üèº',
                consecutive_sixes: 0,
                position_before_three_sixes: 0,
                is_finished: false
              },
              direction: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã',
              message: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 6.'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-2',
              roll: 6,
              gameResult: {
                gameStep: {
                  loka: 6,
                  previous_loka: 68,
                  direction: 'step üö∂üèº',
                  consecutive_sixes: 0,
                  position_before_three_sixes: 0,
                  is_finished: false
                },
                direction: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã',
                message: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 6.'
              },
              message: 'Dice roll 6 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.gameStep.loka).toBe(6);
      expect(typedResult.gameResult.gameStep.previous_loka).toBe(68);
      expect(typedResult.gameResult.gameStep.is_finished).toBe(false);
    });

    it('should handle game not starting (not rolling 6 from position 68)', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-stay',
          roll: 3
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-stay',
              roll: 3
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              id: 'test-user-stay',
              plan: 68,
              previous_plan: 0,
              isFinished: true, // –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
              consecutiveSixes: 0,
              positionBeforeThreeSixes: 0,
              needsReport: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 68, // –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
                previous_loka: 68,
                direction: 'stop üõë',
                consecutive_sixes: 0,
                position_before_three_sixes: 0,
                is_finished: true
              },
              direction: '–°—Ç–æ–ø üõë',
              message: '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å 6'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-stay',
              roll: 3,
              gameResult: {
                gameStep: {
                  loka: 68,
                  previous_loka: 68,
                  direction: 'stop üõë',
                  consecutive_sixes: 0,
                  position_before_three_sixes: 0,
                  is_finished: true
                },
                direction: '–°—Ç–æ–ø üõë',
                message: '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å 6'
              },
              message: 'Dice roll 3 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.gameStep.loka).toBe(68);
      expect(typedResult.gameResult.gameStep.is_finished).toBe(true);
    });
  });

  describe('üêç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ü–æ–¥—Ä—è–¥ –ò–¥—É—â–∏—Ö –®–µ—Å—Ç–µ—Ä–æ–∫', () => {
    it('should handle three consecutive sixes and return to previous position', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-3',
          roll: 6
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-3',
              roll: 6
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              id: 'test-user-3',
              plan: 25,
              previous_plan: 20,
              isFinished: false,
              consecutiveSixes: 2, // —É–∂–µ –¥–≤–µ —à–µ—Å—Ç–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥
              positionBeforeThreeSixes: 15, // –ø–æ–∑–∏—Ü–∏—è –¥–æ —Ç—Ä–µ—Ö —à–µ—Å—Ç–µ—Ä–æ–∫
              needsReport: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 15, // –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –¥–æ —Ç—Ä–µ—Ö —à–µ—Å—Ç–µ—Ä–æ–∫
                previous_loka: 25,
                direction: 'snake üêç',
                consecutive_sixes: 0, // –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                position_before_three_sixes: 15,
                is_finished: false
              },
              direction: '–ó–º–µ—è üêç',
              message: '–¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥! –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –Ω–∞–∑–∞–¥!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-3',
              roll: 6,
              gameResult: {
                gameStep: {
                  loka: 15,
                  previous_loka: 25,
                  direction: 'snake üêç',
                  consecutive_sixes: 0,
                  position_before_three_sixes: 15,
                  is_finished: false
                },
                direction: '–ó–º–µ—è üêç',
                message: '–¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥! –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –Ω–∞–∑–∞–¥!'
              },
              message: 'Dice roll 6 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.gameStep.loka).toBe(15);
      expect(typedResult.gameResult.gameStep.consecutive_sixes).toBe(0);
      expect(typedResult.gameResult.direction).toBe('–ó–º–µ—è üêç');
    });

    it('should track consecutive sixes correctly', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-4',
          roll: 6
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-4',
              roll: 6
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              plan: 20,
              consecutiveSixes: 1, // –ø–µ—Ä–≤–∞—è —à–µ—Å—Ç–µ—Ä–∫–∞
              positionBeforeThreeSixes: 14,
              isFinished: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                consecutive_sixes: 2, // –≤—Ç–æ—Ä–∞—è —à–µ—Å—Ç–µ—Ä–∫–∞
                position_before_three_sixes: 14 // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
              }
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-4',
              roll: 6,
              gameResult: {
                gameStep: {
                  consecutive_sixes: 2,
                  position_before_three_sixes: 14
                }
              },
              message: 'Dice roll 6 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.gameStep.consecutive_sixes).toBe(2);
    });
  });

  describe('üèπ –°—Ç—Ä–µ–ª—ã –∏ –ó–º–µ–∏', () => {
    it('should handle arrow positions correctly', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-5',
          roll: 3
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-5',
              roll: 3
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              plan: 1, // –ø–æ–∑–∏—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ +3 –¥–∞—Å—Ç 4 (–ø–æ–∑–∏—Ü–∏—è —Å—Ç—Ä–µ–ª—ã)
              isFinished: false,
              consecutiveSixes: 0
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 14, // —Å—Ç—Ä–µ–ª–∞ 4 -> 14
                direction: 'arrow üèπ',
                is_finished: false
              },
              direction: '–°—Ç—Ä–µ–ª–∞ üèπ',
              message: '–°—Ç—Ä–µ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-5',
              roll: 3,
              gameResult: {
                gameStep: {
                  loka: 14,
                  direction: 'arrow üèπ',
                  is_finished: false
                },
                direction: '–°—Ç—Ä–µ–ª–∞ üèπ',
                message: '–°—Ç—Ä–µ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥!'
              },
              message: 'Dice roll 3 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.direction).toBe('–°—Ç—Ä–µ–ª–∞ üèπ');
    });

    it('should handle snake positions correctly', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-6',
          roll: 5
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-6',
              roll: 5
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({})
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 6, // –∑–º–µ—è 16 -> 6
                direction: 'snake üêç',
                is_finished: false
              },
              direction: '–ó–º–µ—è üêç',
              message: '–ó–º–µ—è —É—Ç—è–≥–∏–≤–∞–µ—Ç –≤–∞—Å –Ω–∞–∑–∞–¥!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-6',
              roll: 5,
              gameResult: {
                gameStep: {
                  loka: 6,
                  direction: 'snake üêç',
                  is_finished: false
                },
                direction: '–ó–º–µ—è üêç',
                message: '–ó–º–µ—è —É—Ç—è–≥–∏–≤–∞–µ—Ç –≤–∞—Å –Ω–∞–∑–∞–¥!'
              },
              message: 'Dice roll 5 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.direction).toBe('–ó–º–µ—è üêç');
    });
  });

  describe('üèÜ –ü–æ–±–µ–¥–∞', () => {
    it('should handle winning condition at loka 68', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-7',
          roll: 2
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-7',
              roll: 2
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              plan: 66, // –ø–æ–∑–∏—Ü–∏—è –±–ª–∏–∑–∫–æ –∫ –ø–æ–±–µ–¥–µ
              isFinished: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 68, // WIN_LOKA
                direction: 'win üïâ',
                is_finished: true
              },
              direction: '–ü–æ–±–µ–¥–∞ üïâ',
              message: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-7',
              roll: 2,
              gameResult: {
                gameStep: {
                  loka: 68,
                  direction: 'win üïâ',
                  is_finished: true
                },
                direction: '–ü–æ–±–µ–¥–∞ üïâ',
                message: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è!'
              },
              message: 'Dice roll 2 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.gameStep.loka).toBe(68);
      expect(typedResult.gameResult.gameStep.is_finished).toBe(true);
      expect(typedResult.gameResult.direction).toBe('–ü–æ–±–µ–¥–∞ üïâ');
    });
  });

  describe('üö´ –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è', () => {
    it('should handle position exceeding maximum', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'test-user-8',
          roll: 6
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'test-user-8',
              roll: 6
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => ({
              plan: 70, // –ø–æ–∑–∏—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ +6 –ø—Ä–µ–≤—ã—Å–∏—Ç 72
              isFinished: false
            })
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 70, // –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
                direction: 'stop üõë',
                is_finished: false
              },
              direction: '–°—Ç–æ–ø üõë',
              message: '–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'test-user-8',
              roll: 6,
              gameResult: {
                gameStep: {
                  loka: 70,
                  direction: 'stop üõë',
                  is_finished: false
                },
                direction: '–°—Ç–æ–ø üõë',
                message: '–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è!'
              },
              message: 'Dice roll 6 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.gameResult.direction).toBe('–°—Ç–æ–ø üõë');
    });
  });

  describe('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞', () => {
    it('should create new player when none exists', async () => {
      const mockEvent = {
        name: 'game.dice.roll',
        data: {
          userId: 'new-user',
          roll: 6
        }
      };

      const { result } = await testEngine.execute({
        events: [mockEvent],
        steps: [
          {
            id: 'validate-input',
            handler: () => ({
              userId: 'new-user',
              roll: 6
            })
          },
          {
            id: 'check-database-connection',
            handler: () => true
          },
          {
            id: 'get-player-state',
            handler: () => null // –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
          },
          {
            id: 'process-game-logic',
            handler: () => ({
              gameStep: {
                loka: 6,
                previous_loka: 68,
                is_finished: false
              },
              message: '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!'
            })
          },
          {
            id: 'save-to-database',
            handler: () => true
          },
          {
            id: 'validate-response',
            handler: () => ({
              success: true,
              userId: 'new-user',
              roll: 6,
              gameResult: {
                gameStep: {
                  loka: 6,
                  previous_loka: 68,
                  is_finished: false
                },
                message: '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!'
              },
              message: 'Dice roll 6 processed successfully'
            })
          }
        ]
      });

      const typedResult = result as DiceRollFunctionResponse;

      expect(typedResult.userId).toBe('new-user');
    });
  });
}); 