import { GameStep, Plan } from '../types';
import { supabase } from '../config/supabase';
import { currentPlayerVar } from '../lib/apollo-drizzle-client';
import { GameMessageService, GameContext } from './GameMessageService';

const directionMap: { [key: string]: { ru: string; en: string } } = {
  'stop üõë': { ru: '–°—Ç–æ–ø üõë', en: 'Stop üõë' },
  '—Å—Ç–æ–ø üõë': { ru: '–°—Ç–æ–ø üõë', en: 'Stop üõë' },
  'arrow üèπ': { ru: '–°—Ç—Ä–µ–ª–∞ üèπ', en: 'Arrow üèπ' },
  '—Å—Ç—Ä–µ–ª–∞ üèπ': { ru: '–°—Ç—Ä–µ–ª–∞ üèπ', en: 'Arrow üèπ' },
  'snake üêç': { ru: '–ó–º–µ—è üêç', en: 'Snake üêç' },
  '–∑–º–µ—è üêç': { ru: '–ó–º–µ—è üêç', en: 'Snake üêç' },
  'win üïâ': { ru: '–ü–æ–±–µ–¥–∞ üïâ', en: 'Win üïâ' },
  '–ø–æ–±–µ–¥–∞ üïâ': { ru: '–ü–æ–±–µ–¥–∞ üïâ', en: 'Win üïâ' },
  'step üö∂üèº': { ru: '–®–∞–≥ üö∂üèº', en: 'Step üö∂üèº' },
  '—à–∞–≥ üö∂üèº': { ru: '–®–∞–≥ üö∂üèº', en: 'Step üö∂üèº' },
};

// Constants
const TOTAL_PLANS = 72;
const WIN_LOKA = 68;
const MAX_ROLL = 6;
const START_LOKA = 6; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –∫—É–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è 6

// Helper function to get user by user ID
export const getUserByUserId = async (userId: string) => {
  const { data, error } = await supabase
    .from('players')
    .select('*')
    .eq('id', userId)
    .single();

  if (error) {
    console.error('Error getting user:', error);
    throw new Error('Failed to get user info');
  }

  return data;
};

// Helper function to get the last game step from local state
export const getLastStep = (): GameStep => {
  const currentPlayer = currentPlayerVar();
  
  console.log(`[GameService] getLastStep –≤—ã–∑–≤–∞–Ω–∞, currentPlayer:`, currentPlayer);
  
  if (!currentPlayer) {
    console.log(`[GameService] currentPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
    return {
      loka: 1,
      previous_loka: 0,
      direction: '',
      consecutive_sixes: 0,
      position_before_three_sixes: 0,
      is_finished: false,
    };
  }
  
  // Convert player data to gameStep format
  const gameStep = {
    loka: currentPlayer.plan || 1,
    previous_loka: currentPlayer.previous_plan || 0,
    direction: '',
    consecutive_sixes: currentPlayer.consecutiveSixes || 0,
    position_before_three_sixes: currentPlayer.positionBeforeThreeSixes || 0,
    is_finished: currentPlayer.isFinished || false,
  };
  
  console.log(`[GameService] getLastStep –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç gameStep:`, gameStep);
  return gameStep;
};

// Helper function to get plan information
export const getPlan = (lokaNumber: number, languageCode = 'en'): Plan => {
  try {
    // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return {
      key: `${lokaNumber}-plan`, 
      title: `–ü–ª–∞–Ω ${lokaNumber}`,
    };
  } catch (error) {
    console.error('Error getting plan:', error);
    return {
      key: `${lokaNumber}-unknown`,
      title: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω ${lokaNumber}`,
    };
  }
};

// Helper function to update player position
export const updatePlayerPosition = async (userId: string, gameStep: GameStep, message?: string): Promise<void> => {
  console.log(`[GameService] updatePlayerPosition –≤—ã–∑–≤–∞–Ω–∞ —Å userId=${userId}, gameStep:`, gameStep, `message=${message}`);
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ—Ç—á–µ—Ç - –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    const needsReport = gameStep.loka !== gameStep.previous_loka && !gameStep.is_finished;
    
    const { error } = await supabase
      .from('players')
      .update({
        plan: gameStep.loka,
        previous_plan: gameStep.previous_loka,
        consecutiveSixes: gameStep.consecutive_sixes,
        positionBeforeThreeSixes: gameStep.position_before_three_sixes,
        isFinished: gameStep.is_finished,
        needsReport: needsReport, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
        message: message || `Last move: ${gameStep.direction}`,
      })
      .eq('id', userId);

    if (error) {
      console.error('[GameService] Error updating player position:', error);
      throw new Error('Failed to update player position');
    } else {
      console.log(`[GameService] updatePlayerPosition —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞ –ø–æ–∑–∏—Ü–∏—é –≤ Supabase, needsReport=${needsReport}`);
    }
  } catch (error) {
    console.error('[GameService] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Supabase:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Supabase, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É)
    console.log('[GameService] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase');
  }
};

// Helper function to handle consecutive sixes
export const handleConsecutiveSixes = (
  roll: number, 
  currentLoka: number,
  consecutive: number, 
  positionBeforeThreeSixes: number
): { 
  newConsecutive: number; 
  newPosition: number; 
  newBeforeThreeSixes: number;
  direction?: string;
} => {
  console.log(`[GameService] handleConsecutiveSixes: –í–•–û–î - roll=${roll}, currentLoka=${currentLoka}, consecutive=${consecutive}, positionBeforeThreeSixes=${positionBeforeThreeSixes}`);
  
  if (roll !== MAX_ROLL) {
    console.log(`[GameService] –ù–µ —à–µ—Å—Ç–µ—Ä–∫–∞ (${roll}), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –Ω–∞ ${currentLoka + roll}`);
    return { 
      newConsecutive: 0, 
      newPosition: currentLoka + roll,
      newBeforeThreeSixes: positionBeforeThreeSixes 
    };
  }

  const newConsecutive = consecutive + 1;
  console.log(`[GameService] –®–µ—Å—Ç–µ—Ä–∫–∞! –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫: ${newConsecutive}`);
  
  // If this is the third consecutive six
  if (newConsecutive === 3) {
    console.log(`[GameService] –¢–†–ï–¢–¨–Ø –®–ï–°–¢–ï–†–ö–ê –ü–û–î–†–Ø–î! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${positionBeforeThreeSixes}`);
    return { 
      newConsecutive: 0, 
      newPosition: positionBeforeThreeSixes,
      newBeforeThreeSixes: positionBeforeThreeSixes,
      direction: 'snake üêç' 
    };
  }
  
  // First or second six
  const newPosition = currentLoka + roll;
  const newBeforeThreeSixes = consecutive === 0 ? currentLoka : positionBeforeThreeSixes;
  console.log(`[GameService] ${newConsecutive === 1 ? '–ü–µ—Ä–≤–∞—è' : '–í—Ç–æ—Ä–∞—è'} —à–µ—Å—Ç–µ—Ä–∫–∞: ${currentLoka} -> ${newPosition}, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é ${newBeforeThreeSixes}`);
  
  return { 
    newConsecutive, 
    newPosition: newPosition,
    newBeforeThreeSixes: newBeforeThreeSixes 
  };
};

// Helper function to get direction and new position based on game rules
export const getDirectionAndPosition = (
  newLoka: number, 
  isFinished: boolean,
  roll: number,
  currentLoka: number
): { 
  finalLoka: number; 
  direction: string; 
  isGameFinished: boolean; 
} => {
  console.log(`[GameService] getDirectionAndPosition: –í–•–û–î - newLoka=${newLoka}, isFinished=${isFinished}, roll=${roll}, currentLoka=${currentLoka}`);
  
  // –ü—Ä–∞–≤–∏–ª–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 68 (WIN_LOKA) –∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  if (currentLoka === WIN_LOKA && isFinished) {
    // –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ 6, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é START_LOKA (6)
    if (roll === MAX_ROLL) {
      console.log(`[GameService] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã! –í—ã–ø–∞–ª–æ 6 –ø—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏ ${WIN_LOKA}, –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${START_LOKA}!`);
      return { 
        finalLoka: START_LOKA,
        direction: 'step üö∂üèº', 
        isGameFinished: false 
      };
    }
    // –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–∞–ª–æ 6, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ –∏ –∂–¥–µ–º 6
    console.log(`[GameService] –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 6. –í—ã–ø–∞–ª–æ: ${roll}`);
    return { 
      finalLoka: WIN_LOKA, 
      direction: 'stop üõë', 
      isGameFinished: true
    };
  }

  // –î–ª—è –æ–±—â–µ–≥–æ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ (isFinished = false)
  console.log(`[GameService] –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é ${newLoka}`);
  
  // Win condition
  if (newLoka === WIN_LOKA) {
    console.log(`[GameService] –ü–û–ë–ï–î–ê! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ–∑–∏—Ü–∏—è ${WIN_LOKA}`);
    return { 
      finalLoka: newLoka, 
      direction: 'win üïâ', 
      isGameFinished: true 
    };
  }

  // Exceeding the board limit - —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
  if (newLoka > TOTAL_PLANS) {
    console.log(`[GameService] –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è: ${newLoka} > ${TOTAL_PLANS}, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ ${currentLoka}`);
    return { 
      finalLoka: currentLoka, 
      direction: 'stop üõë', 
      isGameFinished: false 
    };
  }

  // Snake positions
  const snakePositions: Record<number, number> = {
    12: 8,
    16: 4,
    24: 7,
    29: 6,
    44: 9,
    52: 35,
    55: 3,
    61: 13,
    63: 2,
    72: 51
  };

  if (snakePositions[newLoka]) {
    console.log(`[GameService] –ó–ú–ï–Ø! –ü–æ–∑–∏—Ü–∏—è ${newLoka} -> ${snakePositions[newLoka]}`);
    return { 
      finalLoka: snakePositions[newLoka], 
      direction: 'snake üêç', 
      isGameFinished: false 
    };
  }

  // Arrow positions
  const arrowPositions: Record<number, number> = {
    10: 23,
    17: 69,
    20: 32,
    22: 60,
    27: 41,
    28: 50,
    37: 66,
    45: 67,
    46: 62,
    54: 68
  };

  if (arrowPositions[newLoka]) {
    console.log(`[GameService] –°–¢–†–ï–õ–ê! –ü–æ–∑–∏—Ü–∏—è ${newLoka} -> ${arrowPositions[newLoka]}`);
    // Special case - if arrow leads to win position
    if (arrowPositions[newLoka] === WIN_LOKA) {
      console.log(`[GameService] –°—Ç—Ä–µ–ª–∞ –≤–µ–¥–µ—Ç –∫ –ø–æ–±–µ–¥–µ!`);
      return { 
        finalLoka: arrowPositions[newLoka], 
        direction: 'arrow üèπ', 
        isGameFinished: true 
      };
    }
    return { 
      finalLoka: arrowPositions[newLoka], 
      direction: 'arrow üèπ', 
      isGameFinished: false 
    };
  }

  // Regular move
  console.log(`[GameService] –û–±—ã—á–Ω—ã–π —Ö–æ–¥: ${currentLoka} -> ${newLoka}`);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ 51
  if (currentLoka === 51 || newLoka === 51) {
    console.log(`[GameService] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ó–ò–¶–ò–ò 51: currentLoka=${currentLoka}, newLoka=${newLoka}, roll=${roll}`);
    console.log(`[GameService] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–º–µ–π –∏ —Å—Ç—Ä–µ–ª –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${newLoka}:`);
    console.log(`[GameService] - –ó–º–µ–∏:`, snakePositions);
    console.log(`[GameService] - –°—Ç—Ä–µ–ª—ã:`, arrowPositions);
  }
  
  return { 
    finalLoka: newLoka, 
    direction: 'step üö∂üèº', 
    isGameFinished: false 
  };
};

// Main function to process a game step
export const processGameStep = async (
  roll: number,
  userId: string
): Promise<{ 
  gameStep: GameStep; 
  plan: Plan; 
  direction: string;
  message: string;
}> => {
  console.log(`[GameService] processGameStep –Ω–∞—á–∞–ª–æ —Å roll=${roll}, userId=${userId}`);
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Apollo
  const currentState = getLastStep();
  console.log(`[GameService] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, currentState);
  const languageCode = 'en'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ–∑–∏—Ü–∏—è 68, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
  if (currentState.loka === WIN_LOKA && currentState.is_finished === true && roll === MAX_ROLL) {
    console.log(`[GameService] –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å –ø–æ–∑–∏—Ü–∏–∏ ${WIN_LOKA}, –≤—ã–ø–∞–ª–æ ${MAX_ROLL}!`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —à–∞–≥ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    const gameStep: GameStep = {
      loka: START_LOKA, // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
      previous_loka: WIN_LOKA, // –ú—ã –ø—Ä–∏—à–ª–∏ —Å –ø–æ–∑–∏—Ü–∏–∏ WIN_LOKA
      direction: 'step üö∂üèº',
      consecutive_sixes: 0,
      position_before_three_sixes: 0,
      is_finished: false, // –ò–≥—Ä–∞ —Ç–µ–ø–µ—Ä—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    };

    // Get the plan information for the new loka
    const newPlan = getPlan(START_LOKA, languageCode);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageContext: GameContext = {
      currentPlan: START_LOKA,
      previousPlan: WIN_LOKA,
      roll,
      direction: 'step üö∂üèº',
      isFinished: false,
      consecutiveSixes: 0
    };
    const gameMessage = GameMessageService.generateMessage(messageContext);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await updatePlayerPosition(userId, gameStep, gameMessage.text);

    console.log(`[GameService] –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${START_LOKA}`);
    return {
      gameStep,
      plan: newPlan,
      direction: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üéÆ',
      message: gameMessage.text,
    };
  }
  
  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞ (–º—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 68 –∏ isFinished=true), 
  // –Ω–æ –≤—ã–ø–∞–ª–æ –ù–ï 6, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ
  if (currentState.loka === WIN_LOKA && currentState.is_finished === true && roll !== MAX_ROLL) {
    console.log(`[GameService] –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 6. –í—ã–ø–∞–ª–æ: ${roll}`);
    
    const gameStep: GameStep = {
      loka: WIN_LOKA, // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏
      previous_loka: currentState.previous_loka,
      direction: 'stop üõë',
      consecutive_sixes: 0,
      position_before_three_sixes: 0,
      is_finished: true, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    };

    const newPlan = getPlan(WIN_LOKA, languageCode);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —à–µ—Å—Ç–µ—Ä–∫–∏
    const messageContext: GameContext = {
      currentPlan: WIN_LOKA,
      previousPlan: currentState.previous_loka,
      roll,
      direction: 'stop üõë',
      isFinished: true,
      consecutiveSixes: 0
    };
    const gameMessage = GameMessageService.generateMessage(messageContext);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await updatePlayerPosition(userId, gameStep, gameMessage.text);
    
    return {
      gameStep,
      plan: newPlan,
      direction: '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 6! üé≤',
      message: gameMessage.text,
    };
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
  // Calculate new position with consecutive sixes handling
  const { 
    newConsecutive, 
    newPosition, 
    newBeforeThreeSixes, 
    direction: sixesDirection 
  } = handleConsecutiveSixes(
    roll, 
    currentState.loka, 
    currentState.consecutive_sixes, 
    currentState.position_before_three_sixes
  );
  
  // Get final position and direction based on game rules
  const { 
    finalLoka, 
    direction: finalDirection, 
    isGameFinished 
  } = getDirectionAndPosition(
    newPosition, 
    currentState.is_finished, 
    roll,
    currentState.loka // –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  );
  
  // Use direction from consecutive sixes handler if it exists
  const direction = sixesDirection || finalDirection;
  
  // Construct game step object
  const gameStep: GameStep = {
    loka: finalLoka,
    previous_loka: currentState.loka,
    direction,
    consecutive_sixes: newConsecutive,
    position_before_three_sixes: newBeforeThreeSixes,
    is_finished: isGameFinished,
  };

  // Get the plan information for the new loka
  const newPlan = getPlan(finalLoka, languageCode);

  // Map direction to localized text
  const localizedDirection = 
    directionMap[direction]?.[languageCode as 'en' | 'ru'] || 
    directionMap[direction]?.['en'] || 
    direction;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ö–æ–¥–∞
  const messageContext: GameContext = {
    currentPlan: finalLoka,
    previousPlan: currentState.loka,
    roll,
    direction,
    isFinished: isGameFinished,
    consecutiveSixes: newConsecutive
  };
  const gameMessage = GameMessageService.generateMessage(messageContext);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await updatePlayerPosition(userId, gameStep, gameMessage.text);

  console.log(`[GameService] processGameStep –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:`, { gameStep, plan: newPlan, direction: localizedDirection, message: gameMessage.text });
  // Return the result
  return {
    gameStep,
    plan: newPlan,
    direction: localizedDirection,
    message: gameMessage.text,
  };
};

// Utility function to validate position (useful for testing)
export const validatePosition = (position: number): boolean => {
  return position >= 1 && position <= TOTAL_PLANS;
}; 