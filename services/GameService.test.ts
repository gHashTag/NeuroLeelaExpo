import { describe, it, expect, vi, beforeEach } from 'vitest';
import { handleConsecutiveSixes, getDirectionAndPosition, validatePosition } from './GameService';

// –ú–æ–∫–∏ –¥–ª—è Apollo Client
vi.mock('../lib/apollo-drizzle-client', () => ({
  currentPlayerVar: vi.fn().mockReturnValue({
    id: 'test-user-id',
    plan: 10,
    previous_plan: 5
  })
}));

describe('GameService', () => {
  describe('handleConsecutiveSixes', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —à–µ—Å—Ç–µ—Ä–æ–∫, –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ –Ω–µ 6', () => {
      const result = handleConsecutiveSixes(
        3, // roll
        10, // currentLoka
        2, // consecutive
        5 // positionBeforeThreeSixes
      );
      
      expect(result.newConsecutive).toBe(0);
      expect(result.newPosition).toBe(13); // 10 + 3
      expect(result.newBeforeThreeSixes).toBe(5);
    });
    
    it('–¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —à–µ—Å—Ç–µ—Ä–æ–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–æ —Ç—Ä–µ—Ö —à–µ—Å—Ç–µ—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —à–µ—Å—Ç–µ—Ä–∫–µ', () => {
      const result = handleConsecutiveSixes(
        6, // roll
        10, // currentLoka
        0, // consecutive (–ø–µ—Ä–≤–∞—è —à–µ—Å—Ç–µ—Ä–∫–∞)
        0 // positionBeforeThreeSixes (–µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
      );
      
      expect(result.newConsecutive).toBe(1);
      expect(result.newPosition).toBe(16); // 10 + 6
      expect(result.newBeforeThreeSixes).toBe(10); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    });
    
    it('–¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —à–µ—Å—Ç–µ—Ä–æ–∫ –ø—Ä–∏ –≤—Ç–æ—Ä–æ–π —à–µ—Å—Ç–µ—Ä–∫–µ', () => {
      const result = handleConsecutiveSixes(
        6, // roll
        16, // currentLoka
        1, // consecutive (–≤—Ç–æ—Ä–∞—è —à–µ—Å—Ç–µ—Ä–∫–∞)
        10 // positionBeforeThreeSixes (–ø–æ–∑–∏—Ü–∏—è –¥–æ –ø–µ—Ä–≤–æ–π —à–µ—Å—Ç–µ—Ä–∫–∏)
      );
      
      expect(result.newConsecutive).toBe(2);
      expect(result.newPosition).toBe(22); // 16 + 6
      expect(result.newBeforeThreeSixes).toBe(10); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    });
    
    it('–¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Ç—Ä–µ—Ç—å–µ–π —à–µ—Å—Ç–µ—Ä–∫–µ', () => {
      const result = handleConsecutiveSixes(
        6, // roll
        22, // currentLoka
        2, // consecutive (—Ç—Ä–µ—Ç—å—è —à–µ—Å—Ç–µ—Ä–∫–∞)
        10 // positionBeforeThreeSixes (–ø–æ–∑–∏—Ü–∏—è –¥–æ –ø–µ—Ä–≤–æ–π —à–µ—Å—Ç–µ—Ä–∫–∏)
      );
      
      expect(result.newConsecutive).toBe(0);
      expect(result.newPosition).toBe(10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      expect(result.newBeforeThreeSixes).toBe(10);
      expect(result.direction).toBe('snake üêç');
    });
  });
  
  describe('getDirectionAndPosition', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ö–æ–¥', () => {
      const currentLoka = 10;
      const roll = 5;
      const result = getDirectionAndPosition(
        currentLoka + roll, // newLoka
        false, // isFinished
        roll, // roll
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(15);
      expect(result.direction).toBe('step üö∂üèº');
      expect(result.isGameFinished).toBe(false);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–º–µ–∏ (snakes)', () => {
      const currentLoka = 9;
      const roll = 3;
      const result = getDirectionAndPosition(
        12, // newLoka (–∑–º–µ—è)
        false, // isFinished
        roll, // roll
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(8); // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑
      expect(result.direction).toBe('snake üêç');
      expect(result.isGameFinished).toBe(false);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—ã (arrows)', () => {
      const currentLoka = 7;
      const roll = 3;
      const result = getDirectionAndPosition(
        10, // newLoka (—Å—Ç—Ä–µ–ª–∞)
        false, // isFinished
        roll, // roll
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(23); // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
      expect(result.direction).toBe('arrow üèπ');
      expect(result.isGameFinished).toBe(false);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∏–Ω–∏—à–Ω—É—é –ø–æ–∑–∏—Ü–∏—é', () => {
      const currentLoka = 65;
      const roll = 3;
      const result = getDirectionAndPosition(
        68, // newLoka (–ø–æ–±–µ–¥–∞)
        false, // isFinished
        roll, // roll
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(68);
      expect(result.direction).toBe('win üïâ');
      expect(result.isGameFinished).toBe(true);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–∞–ª–æ 6', () => {
      const currentLoka = 68;
      const roll = 3;
      const result = getDirectionAndPosition(
        71, // newLoka (–ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã)
        true, // isFinished
        roll, // roll (–Ω–µ 6)
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(68);
      expect(result.direction).toBe('stop üõë');
      expect(result.isGameFinished).toBe(true);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 6 –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã', () => {
      const currentLoka = 68;
      const roll = 6;
      const result = getDirectionAndPosition(
        74, // newLoka (–ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã)
        true, // isFinished
        roll, // roll (6)
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(6);
      expect(result.direction).toBe('step üö∂üèº');
      expect(result.isGameFinished).toBe(false);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è', () => {
      const currentLoka = 70;
      const roll = 5;
      const result = getDirectionAndPosition(
        75, // newLoka (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏)
        false, // isFinished
        roll, // roll
        currentLoka // currentLoka
      );
      
      expect(result.finalLoka).toBe(70); // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ
      expect(result.direction).toBe('stop üõë');
      expect(result.isGameFinished).toBe(false);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
      
      // –°–ª—É—á–∞–π 1: –¢–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—è (–ø–æ–∑–∏—Ü–∏—è 72 - –∑–º–µ—è)
      const exactLimitResult = getDirectionAndPosition(72, false, 2, 70);
      expect(exactLimitResult.finalLoka).toBe(51); // –ó–º–µ—è —Å 72 –≤–µ–¥–µ—Ç –Ω–∞ 51
      expect(exactLimitResult.direction).toBe('snake üêç');
      
      // –°–ª—É—á–∞–π 2: –°—Ä–∞–∑—É –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π (–ø–æ–∑–∏—Ü–∏—è 73)
      const justOverLimitResult = getDirectionAndPosition(73, false, 3, 70);
      expect(justOverLimitResult.finalLoka).toBe(70); // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
      expect(justOverLimitResult.direction).toBe('stop üõë');
      
      // –°–ª—É—á–∞–π 3: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π (–ø–æ–∑–∏—Ü–∏—è 75)
      const wellOverLimitResult = getDirectionAndPosition(75, false, 5, 70);
      expect(wellOverLimitResult.finalLoka).toBe(70); // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
      expect(wellOverLimitResult.direction).toBe('stop üõë');
    });
    
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å –ø–æ–∑–∏—Ü–∏–∏ 68', () => {
      // –°–ª—É—á–∞–π: –ù–∞ –ø–æ–∑–∏—Ü–∏–∏ 68, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã–ø–∞–ª–æ 6
      const startWithSixResult = getDirectionAndPosition(68, true, 6, 68);
      expect(startWithSixResult.finalLoka).toBe(6); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 6
      expect(startWithSixResult.direction).toBe('step üö∂üèº');
      expect(startWithSixResult.isGameFinished).toBe(false);
      
      // –°–ª—É—á–∞–π: –ù–∞ –ø–æ–∑–∏—Ü–∏–∏ 68, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã–ø–∞–ª–æ –Ω–µ 6
      const startWithoutSixResult = getDirectionAndPosition(68, true, 3, 68);
      expect(startWithoutSixResult.finalLoka).toBe(68); // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ 68
      expect(startWithoutSixResult.direction).toBe('stop üõë');
      expect(startWithoutSixResult.isGameFinished).toBe(true);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±—Ä–æ—Å–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
      for (let roll = 1; roll <= 6; roll++) {
        const result = getDirectionAndPosition(68, true, roll, 68);
        
        if (roll === 6) {
          // –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ 6, –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –ø–æ–∑–∏—Ü–∏–∏ 6
          expect(result.finalLoka).toBe(6);
          expect(result.direction).toBe('step üö∂üèº');
          expect(result.isGameFinished).toBe(false);
        } else {
          // –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ –Ω–µ 6, –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 68
          expect(result.finalLoka).toBe(68);
          expect(result.direction).toBe('stop üõë');
          expect(result.isGameFinished).toBe(true);
        }
      }
    });
  });
  
  describe('validatePosition', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞', () => {
      expect(validatePosition(1)).toBe(true);
      expect(validatePosition(42)).toBe(true);
      expect(validatePosition(72)).toBe(true);
    });
    
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', () => {
      expect(validatePosition(0)).toBe(false);
      expect(validatePosition(-5)).toBe(false);
      expect(validatePosition(73)).toBe(false);
      expect(validatePosition(100)).toBe(false);
    });
  });
}); 