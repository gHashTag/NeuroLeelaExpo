import { PINATA } from '@/constants';
import * as FileSystem from 'expo-file-system';

// –¢–∏–ø –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å FormData –≤ React Native
type ReactNativeFile = {
  uri: string;
  name?: string; // –°–¥–µ–ª–∞–µ–º –∏–º—è –∏ —Ç–∏–ø –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  type?: string;
};

export class PinataService {
  private static instance: PinataService;
  private readonly baseUrl = 'https://api.pinata.cloud';

  private constructor() {}

  public static getInstance(): PinataService {
    if (!PinataService.instance) {
      PinataService.instance = new PinataService();
    }
    return PinataService.instance;
  }

  private validateJWT(token: string): boolean {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (!token || typeof token !== 'string') {
      console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT
    const parts = token.split('.');
    console.log('üîç –ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞:', parts);
    console.log('üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π:', parts.length);

    if (parts.length !== 3) {
      console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º base64
    for (let i = 0; i < parts.length; i++) {
      if (!parts[i]) {
        console.error(`‚ùå –ß–∞—Å—Ç—å ${i + 1} JWT —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç–∞—è`);
        return false;
      }
      try {
        const decoded = atob(parts[i].replace(/-/g, '+').replace(/_/g, '/'));
        console.log(`‚úÖ –ß–∞—Å—Ç—å ${i + 1} —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞`);
        if (i === 1) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
          const payload = JSON.parse(decoded);
          console.log('‚úÖ Payload –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', payload);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Å—Ç–∏ ${i + 1}:`, error);
        return false;
      }
    }

    return true;
  }

  public async uploadFile(fileInput: Blob | ReactNativeFile): Promise<string> {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Pinata');

    if (!PINATA.JWT) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JWT —Ç–æ–∫–µ–Ω Pinata');
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JWT —Ç–æ–∫–µ–Ω Pinata');
    }

    const formData = new FormData();
    let fileName: string;
    let fileToAppend: any; // FormData.append –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã

    if (fileInput instanceof Blob) {
      console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ Blob —Ñ–∞–π–ª–∞');
      const blob = fileInput as Blob;
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ Blob, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
      fileName = (blob as any).name || `avatar_blob_${Date.now()}.${blob.type.split('/')[1] || 'jpg'}`;
      fileToAppend = blob;
    } else if (fileInput && typeof fileInput.uri === 'string') {
      console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ReactNativeFile (uri)');
      const reactNativeFile = fileInput as ReactNativeFile;
      const uriParts = reactNativeFile.uri.split('/');
      const originalNameFromUri = uriParts[uriParts.length - 1];
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ URI
      fileName = reactNativeFile.name || `avatar_uri_${Date.now()}_${originalNameFromUri}`;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –∏–º–µ–Ω–∏, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const fileExtension = originalNameFromUri.includes('.') ? originalNameFromUri.split('.').pop() : 'jpg';
      const fileMimeType = reactNativeFile.type || `image/${fileExtension}`;

      fileToAppend = {
        uri: reactNativeFile.uri,
        name: fileName,
        type: fileMimeType,
      };
    } else {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', fileInput);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
    }
    
    console.log('üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –¥–ª—è FormData:', { fileToAppend, fileName });

    formData.append('file', fileToAppend, fileName);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = JSON.stringify({
      name: fileName,
      keyvalues: {
        type: 'avatar',
        timestamp: new Date().toISOString()
      }
    });
    formData.append('pinataMetadata', metadata);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    const options = JSON.stringify({
      cidVersion: 0
    });
    formData.append('pinataOptions', options);

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Pinata');
      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω:', PINATA.JWT.substring(0, 50) + '...');
      
      const response = await fetch(`${this.baseUrl}/pinning/pinFileToIPFS`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${PINATA.JWT}`,
        },
        body: formData,
      });

      const responseText = await response.text();
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Pinata:', responseText);

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Pinata API:', response.status, responseText);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${responseText}`);
      }

      let data;
      try {
        data = JSON.parse(responseText);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', error);
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Pinata API');
      }

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Pinata:', data);

      if (!data.IpfsHash) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç IPFS —Ö–µ—à –≤ –æ—Ç–≤–µ—Ç–µ');
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Pinata API');
      }

      return data.IpfsHash;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  public getFileUrl(ipfsHash: string): string | null {
    try {
      if (!PINATA.GATEWAY_URL) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PINATA_GATEWAY_URL');
        return null;
      }
      
      console.log('üîó –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞...');
      const url = `${PINATA.GATEWAY_URL}${ipfsHash}`;
      console.log('‚úÖ URL —Ñ–∞–π–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', url);
      return url;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ URL —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }
}

export const pinataService = PinataService.getInstance();
