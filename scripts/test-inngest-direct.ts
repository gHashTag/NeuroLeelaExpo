#!/usr/bin/env bun

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Inngest —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ HTTP API
import { ServerPlayerService, ServerReportService } from '../inngest/server-config/database';

async function sendEvent(eventName: string, data: any) {
  const response = await fetch('http://localhost:8288/e/test', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name: eventName,
      data: data,
    }),
  });
  
  if (!response.ok) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è ${eventName}:`, response.status, await response.text());
    return false;
  }
  
  const result = await response.text();
  console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ ${eventName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–≤–µ—Ç:`, result);
  return true;
}

async function testDirectAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Inngest —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ HTTP API...\n');
  
  const testUserId = `test-direct-${Date.now()}`;
  console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${testUserId}\n`);

  try {
    // –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞...');
    const init = await sendEvent('game.player.init', {
      userId: testUserId,
      email: 'test@neuroleela.com'
    });
    
    if (init) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const player = await ServerPlayerService.getPlayer(testUserId);
      if (player) {
        console.log('‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', {
          id: player.id,
          plan: player.plan,
          isFinished: player.isFinished
        });
      } else {
        console.log('‚ö†Ô∏è –ò–≥—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      }
    }

    // –¢–ï–°–¢ 2: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    console.log('\n2Ô∏è‚É£ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (6 –¥–ª—è –Ω–∞—á–∞–ª–∞)...');
    const dice1 = await sendEvent('game.dice.roll', {
      userId: testUserId,
      roll: 6
    });
    
    if (dice1) {
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const playerAfterDice = await ServerPlayerService.getPlayer(testUserId);
      if (playerAfterDice) {
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞:', {
          plan: playerAfterDice.plan,
          previous_plan: playerAfterDice.previous_plan,
          isFinished: playerAfterDice.isFinished,
          needsReport: playerAfterDice.needsReport
        });
      }
    }

    // –¢–ï–°–¢ 3: –ï—â–µ –æ–¥–∏–Ω –±—Ä–æ—Å–æ–∫
    console.log('\n3Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (4)...');
    const dice2 = await sendEvent('game.dice.roll', {
      userId: testUserId,
      roll: 4
    });
    
    if (dice2) {
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const playerAfterSecond = await ServerPlayerService.getPlayer(testUserId);
      if (playerAfterSecond) {
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–æ—Å–∫–∞:', {
          plan: playerAfterSecond.plan,
          previous_plan: playerAfterSecond.previous_plan,
          needsReport: playerAfterSecond.needsReport
        });
        
        // –¢–ï–°–¢ 4: –û—Ç—á–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if (playerAfterSecond.needsReport) {
          console.log('\n4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞...');
          const report = await sendEvent('game.report.submit', {
            userId: testUserId,
            planNumber: playerAfterSecond.plan,
            report: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ HTTP API'
          });
          
          if (report) {
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ –ë–î
            const reports = await ServerReportService.getPlayerReports(testUserId);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –≤ –ë–î: ${reports.length}`);
            
            const playerAfterReport = await ServerPlayerService.getPlayer(testUserId);
            if (playerAfterReport) {
              console.log('‚úÖ needsReport –ø–æ—Å–ª–µ –æ—Ç—á–µ—Ç–∞:', playerAfterReport.needsReport);
            }
          }
        } else {
          console.log('‚ÑπÔ∏è –û—Ç—á–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      }
    }

    // –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞...');
    const update = await sendEvent('game.player.state.update', {
      userId: testUserId,
      updates: {
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP API'
      }
    });

    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î:');
    
    const finalPlayer = await ServerPlayerService.getPlayer(testUserId);
    if (finalPlayer) {
      console.log({
        id: finalPlayer.id,
        plan: finalPlayer.plan,
        isFinished: finalPlayer.isFinished,
        needsReport: finalPlayer.needsReport,
        message: finalPlayer.message
      });
    }

    const finalReports = await ServerReportService.getPlayerReports(testUserId);
    console.log(`üìã –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: ${finalReports.length}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testDirectAPI().catch(console.error); 