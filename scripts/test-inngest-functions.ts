#!/usr/bin/env bun

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π
import { Inngest } from 'inngest';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π dev —Å–µ—Ä–≤–µ—Ä
const inngestClient = new Inngest({ 
  id: 'test-client',
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è dev —Å–µ—Ä–≤–µ—Ä–∞
  baseUrl: 'http://localhost:8288', // Inngest dev server
  fetch: fetch
});

async function testInngestFunctions() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Inngest —Ñ—É–Ω–∫—Ü–∏–π (–ª–æ–∫–∞–ª—å–Ω—ã–π dev —Å–µ—Ä–≤–µ—Ä)...\n');
  
  const testUserId = `test-player-${Date.now()}`;
  console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${testUserId}\n`);

  try {
    // –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: initializePlayer');
    const initResult = await inngestClient.send({
      name: 'game.player.init',
      data: {
        userId: testUserId,
        email: 'test@neuroleela.com'
      }
    });
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', initResult.ids);

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –¢–ï–°–¢ 2: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: processDiceRoll (–Ω–∞—á–∞–ª–æ)');
    const diceResult1 = await inngestClient.send({
      name: 'game.dice.roll',
      data: {
        userId: testUserId,
        roll: 6
      }
    });
    console.log('‚úÖ –ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', diceResult1.ids);

    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–ï–°–¢ 3: –û–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: processDiceRoll (–æ–±—ã—á–Ω—ã–π —Ö–æ–¥)');
    const diceResult2 = await inngestClient.send({
      name: 'game.dice.roll',
      data: {
        userId: testUserId,
        roll: 4
      }
    });
    console.log('‚úÖ –í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', diceResult2.ids);

    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–ï–°–¢ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: processReport');
    const reportResult = await inngestClient.send({
      name: 'game.report.submit',
      data: {
        userId: testUserId,
        planNumber: 10,
        report: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ processReport'
      }
    });
    console.log('‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', reportResult.ids);

    await new Promise(resolve => setTimeout(resolve, 2000));

    // –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: updatePlayerState');
    const updateResult = await inngestClient.send({
      name: 'game.player.state.update',
      data: {
        userId: testUserId,
        updates: {
          message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–º'
        }
      }
    });
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', updateResult.ids);

    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Inngest —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

testInngestFunctions().catch(console.error); 