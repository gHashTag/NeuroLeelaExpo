import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { 
  useCurrentPlayerPositionDirect,
  useLoadingStateDirect 
} from '@/hooks/useApolloState';
import { supabase } from '@/config/supabase';
import { useSupabase } from '@/context/supabase-provider';

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –¥–æ—Å–∫–µ
const MAX_POSITION = 72;

export const PlayerPositionApollo: React.FC = () => {
  const { currentPosition, setCurrentPosition } = useCurrentPlayerPositionDirect();
  const { loading, setLoading } = useLoadingStateDirect();
  const { user } = useSupabase();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ –ë–î –∏ Apollo Cache
  const updatePlayerPosition = async (newPosition: number) => {
    if (!user) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (newPosition < 1 || newPosition > MAX_POSITION) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:', newPosition);
      return;
    }

    try {
      setLoading(true);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase
        .from('players')
        .update({ plan: newPosition })
        .eq('id', user.id);

      if (error) {
        throw error;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ Apollo Client
      setCurrentPosition(newPosition);
      
      console.log(`–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${newPosition}`);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error.message);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
  const moveForward = () => {
    if (currentPosition < MAX_POSITION) {
      updatePlayerPosition(currentPosition + 1);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
  const moveBackward = () => {
    if (currentPosition > 1) {
      updatePlayerPosition(currentPosition - 1);
    }
  };

  // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6)
  const rollDice = () => {
    const diceResult = Math.floor(Math.random() * 6) + 1;
    const newPosition = Math.min(currentPosition + diceResult, MAX_POSITION);
    updatePlayerPosition(newPosition);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.positionText}>
        –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {currentPosition} –∏–∑ {MAX_POSITION}
      </Text>
      
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.button, styles.backButton, currentPosition <= 1 && styles.disabledButton]}
          onPress={moveBackward}
          disabled={loading || currentPosition <= 1}
        >
          <Text style={styles.buttonText}>‚Üê –ù–∞–∑–∞–¥</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.button, styles.diceButton, loading && styles.disabledButton]}
          onPress={rollDice}
          disabled={loading || currentPosition >= MAX_POSITION}
        >
          <Text style={styles.buttonText}>üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.button, styles.forwardButton, currentPosition >= MAX_POSITION && styles.disabledButton]}
          onPress={moveForward}
          disabled={loading || currentPosition >= MAX_POSITION}
        >
          <Text style={styles.buttonText}>–í–ø–µ—Ä–µ–¥ ‚Üí</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 15,
    backgroundColor: '#f5f5f5',
    borderRadius: 10,
    margin: 10,
  },
  positionText: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 15,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  button: {
    flex: 1,
    padding: 12,
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 5,
  },
  backButton: {
    backgroundColor: '#f44336',
  },
  forwardButton: {
    backgroundColor: '#4CAF50',
  },
  diceButton: {
    backgroundColor: '#2196F3',
  },
  disabledButton: {
    opacity: 0.5,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
}); 