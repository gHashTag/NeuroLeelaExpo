import React, { useState, useCallback } from 'react';
import { View, TextInput, Text, ActivityIndicator, StyleSheet } from 'react-native';
import { TouchableOpacity } from 'react-native-gesture-handler';

interface UsernameCheckProps {
  onUsernameValidated: (username: string) => void;
}

export const UsernameCheck: React.FC<UsernameCheckProps> = ({ onUsernameValidated }) => {
  const [username, setUsername] = useState('');
  const [checking, setChecking] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const validateUsername = useCallback(async () => {
    if (!username) {
      setError('–í–≤–µ–¥–∏—Ç–µ username');
      return;
    }

    try {
      setChecking(true);
      setError(null);
      
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É username:', username);
      
      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (username.length < 3) {
        throw new Error('Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
      }
      
      if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        throw new Error('Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
      }
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('‚úÖ Username –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:', username);
      onUsernameValidated(username);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username:', error);
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setChecking(false);
    }
  }, [username, onUsernameValidated]);

  return (
    <View style={styles.container}>
      <Text style={styles.label}>–í—ã–±–µ—Ä–∏—Ç–µ Username</Text>
      <Text style={styles.description}>
        –í—ã–±–µ—Ä–∏—Ç–µ username –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.
      </Text>
      
      <TextInput
        style={styles.input}
        value={username}
        onChangeText={(text) => {
          setUsername(text);
          setError(null);
        }}
        placeholder="–í–≤–µ–¥–∏—Ç–µ username"
        autoCapitalize="none"
        autoCorrect={false}
        editable={!checking}
        onSubmitEditing={validateUsername}
      />
      
      <TouchableOpacity 
        style={[
          styles.button,
          checking && styles.buttonDisabled
        ]}
        onPress={validateUsername}
        disabled={checking}
      >
        {checking ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="small" color="#fff" />
            <Text style={styles.buttonTextLoading}>–ü—Ä–æ–≤–µ—Ä—è–µ–º...</Text>
          </View>
        ) : (
          <Text style={styles.buttonText}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</Text>
        )}
      </TouchableOpacity>
      
      {error && (
        <Text style={styles.errorText}>{error}</Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    width: '100%',
  },
  label: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  description: {
    fontSize: 16,
    color: '#666',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    height: 50,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 15,
    fontSize: 16,
    backgroundColor: '#fff',
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#007AFF',
    borderRadius: 8,
    height: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#999',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  buttonTextLoading: {
    color: '#fff',
    fontSize: 16,
    marginLeft: 10,
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  errorText: {
    color: 'red',
    marginTop: 10,
    textAlign: 'center',
  },
}); 