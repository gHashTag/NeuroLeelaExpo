import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';
import * as FileSystem from 'expo-file-system';
import { useState } from 'react';
import { View, TouchableOpacity, Image, Text, ActivityIndicator, StyleSheet, Platform } from 'react-native';
import { PinataService } from '../services/pinata';
import { PINATA } from '../constants';

interface AvatarUploadProps {
  updateUserAvatar: (url: string) => Promise<void>;
}

export const AvatarUpload: React.FC<AvatarUploadProps> = ({ updateUserAvatar }) => {
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [image, setImage] = useState<string | null>(null);

  const createBlob = async (uri: string): Promise<Blob> => {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º Blob –∏–∑ —Ñ–∞–π–ª–∞...');
    
    if (Platform.OS === 'web') {
      const response = await fetch(uri);
      const blob = await response.blob();
      console.log('‚úÖ Blob —Å–æ–∑–¥–∞–Ω (web):', { size: blob.size, type: blob.type });
      return blob;
    } else {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ base64
      const base64 = await FileSystem.readAsStringAsync(uri, {
        encoding: FileSystem.EncodingType.Base64,
      });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Blob
      const byteCharacters = atob(base64);
      const byteArrays = [];
      
      for (let offset = 0; offset < byteCharacters.length; offset += 512) {
        const slice = byteCharacters.slice(offset, offset + 512);
        const byteNumbers = new Array(slice.length);
        
        for (let i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }
        
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }
      
      const blob = new Blob(byteArrays, { type: 'image/jpeg' });
      console.log('‚úÖ Blob —Å–æ–∑–¥–∞–Ω (mobile):', { size: blob.size, type: blob.type });
      return blob;
    }
  };

  const pickImage = async () => {
    try {
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
      
      if (!permissionResult.granted) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled) {
        await handleImagePicked(result);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  };

  const handleImagePicked = async (pickerResult: ImagePicker.ImagePickerResult) => {
    try {
      if (pickerResult.canceled) {
        console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      const selectedAsset = pickerResult.assets[0];
      console.log('üñºÔ∏è –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', selectedAsset.uri);

      setUploading(true);
      setError(null);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
      const processedImage = await ImageManipulator.manipulateAsync(
        selectedAsset.uri,
        [{ resize: { width: Platform.OS === 'web' ? 800 : 400 } }],
        { compress: 0.8, format: ImageManipulator.SaveFormat.JPEG }
      );
      
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', processedImage.uri);

      // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const blob = await createBlob(processedImage.uri);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Pinata
      const pinataService = PinataService.getInstance();
      const ipfsHash = await pinataService.uploadFile(blob);
      console.log('üìç –ü–æ–ª—É—á–µ–Ω IPFS —Ö–µ—à:', ipfsHash);

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
      const avatarUrl = pinataService.getFileUrl(ipfsHash);
      if (!avatarUrl) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∞');
      }
      console.log('üîó URL –∞–≤–∞—Ç–∞—Ä–∞:', avatarUrl);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await updateUserAvatar(avatarUrl);
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');

      setImage(avatarUrl);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setUploading(false);
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={pickImage} disabled={uploading} style={styles.uploadButton}>
        {image ? (
          <Image source={{ uri: image }} style={styles.avatar} />
        ) : (
          <Text style={styles.uploadText}>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</Text>
        )}
      </TouchableOpacity>
      
      {uploading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0000ff" />
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
        </View>
      )}
      
      {error && (
        <Text style={styles.errorText}>{error}</Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  uploadButton: {
    width: 150,
    height: 150,
    borderRadius: 75,
    backgroundColor: '#f0f0f0',
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderWidth: 2,
    borderColor: '#ddd',
  },
  avatar: {
    width: '100%',
    height: '100%',
  },
  uploadText: {
    color: '#666',
    textAlign: 'center',
    padding: 10,
  },
  loadingContainer: {
    marginTop: 20,
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    color: '#666',
  },
  errorText: {
    marginTop: 20,
    color: 'red',
    textAlign: 'center',
  },
}); 