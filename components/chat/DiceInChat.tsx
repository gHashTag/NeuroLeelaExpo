import React, { useRef, useState } from 'react';
import { View, Text, Animated, Easing, Pressable, StyleSheet } from 'react-native';
import { vs } from 'react-native-size-matters';

interface DiceInChatProps {
  onRoll: () => Promise<number>;
  lastRoll: number;
  disabled?: boolean;
  message?: string;
}

export const DiceInChat: React.FC<DiceInChatProps> = ({ 
  onRoll, 
  lastRoll, 
  disabled = false,
  message = "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫!"
}) => {
  console.log('üé≤ [DiceInChat] =================== –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê ===================');
  console.log('üé≤ [DiceInChat] PROPS:', { disabled, lastRoll, message });
  console.log('üé≤ [DiceInChat] onRoll type:', typeof onRoll);
  console.log('üé≤ [DiceInChat] disabled:', disabled);
  console.log('üé≤ [DiceInChat] –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: disabled =', disabled);

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–ß–ù–û –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º Dice –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  const spinValue = useRef(new Animated.Value(0)).current;
  const scaleValue = useRef(new Animated.Value(1)).current;
  const opacityValue = useRef(new Animated.Value(1)).current;
  const [isAnimating, setIsAnimating] = useState(false);

  console.log('üé≤ [DiceInChat] STATE:', {
    disabled,
    lastRoll,
    isAnimating,
    onRoll: typeof onRoll
  });

  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "360deg"],
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–±–∏–∫–∞ (–¢–û–ß–ù–û –∫–∞–∫ –≤ Dice –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
  const getImage = (number: number) => {
    switch (number) {
      case 1:
        return require("../../assets/dice/1.png");
      case 2:
        return require("../../assets/dice/2.png");
      case 3:
        return require("../../assets/dice/3.png");
      case 4:
        return require("../../assets/dice/4.png");
      case 5:
        return require("../../assets/dice/5.png");
      case 6:
        return require("../../assets/dice/6.png");
      default:
        return null;
    }
  };

  // –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø animateDice –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Dice –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const animateDice = (): void => {
    console.log('üé≤ [DiceInChat] ================== animateDice –í–´–ó–í–ê–ù–ê ==================');
    console.log('üé≤ [DiceInChat] animateDice: disabled =', disabled);
    console.log('üé≤ [DiceInChat] animateDice: isAnimating =', isAnimating);
    
    if (disabled) {
      console.log('üö´ [DiceInChat] animateDice –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê: disabled = true');
      return;
    }
    
    if (isAnimating) {
      console.log('üö´ [DiceInChat] animateDice –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê: isAnimating = true');
      return;
    }

    console.log('‚úÖ [DiceInChat] –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ò–ú–ê–¶–ò–Æ –ö–£–ë–ò–ö–ê');
    setIsAnimating(true);
    
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º onRoll() –ë–ï–ó await (–∫–∞–∫ rollDice –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
    console.log('üé≤ [DiceInChat] –í—ã–∑—ã–≤–∞–µ–º onRoll()...');
    
    try {
      onRoll(); // –£–±–∏—Ä–∞–µ–º await!
      console.log('‚úÖ [DiceInChat] onRoll() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå [DiceInChat] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onRoll():', error);
    }
    
    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è –∫—É–±–∏–∫–∞
    console.log('üé≤ [DiceInChat] –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è...');
    spinValue.setValue(0);
    Animated.timing(spinValue, {
      toValue: 1,
      duration: 500,
      easing: Easing.cubic,
      useNativeDriver: true,
    }).start(() => {
      // –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('‚úÖ [DiceInChat] –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      spinValue.setValue(0);
      setIsAnimating(false);
    });

    // –ê–Ω–∏–º–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üé≤ [DiceInChat] –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è...');
    scaleValue.setValue(1);
    Animated.sequence([
      Animated.timing(scaleValue, {
        toValue: 1.2,
        duration: 250,
        useNativeDriver: true,
      }),
      Animated.timing(scaleValue, {
        toValue: 1,
        duration: 250,
        useNativeDriver: true,
      }),
    ]).start();

    // –£–ë–ò–†–ê–ï–ú –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ - –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç –∫—É–±–∏–∫ –Ω–µ–≤–∏–¥–∏–º—ã–º
    // opacityValue –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º 1 –≤—Å–µ–≥–¥–∞
  };

  // –†–∞–∑–º–µ—Ä –∫—É–±–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞ (–Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —á–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π)
  const diceSize = vs(55); // "small" —Ä–∞–∑–º–µ—Ä

  // –£–ë–ò–†–ê–ï–ú pointerEvents - —ç—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è
  console.log('üé≤ [DiceInChat] –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê disabled:', disabled);
  console.log('üé≤ [DiceInChat] –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê isAnimating:', isAnimating);

  return (
    <View style={styles.container}>
      <Text style={styles.messageText}>
        {message}
      </Text>
      
      <View style={styles.diceContainer}>
        <Pressable 
          onPress={() => {
            console.log('üé≤ [DiceInChat] ================ Pressable onPress –°–†–ê–ë–û–¢–ê–õ! ================');
            console.log('üé≤ [DiceInChat] Pressable onPress: disabled =', disabled);
            console.log('üé≤ [DiceInChat] Pressable onPress: isAnimating =', isAnimating);
            console.log('üé≤ [DiceInChat] Pressable onPress: –í—ã–∑—ã–≤–∞–µ–º animateDice()...');
            animateDice();
          }} 
          style={[
            styles.pressableArea,
            (disabled || isAnimating) && styles.pressableDisabled
          ]}
          disabled={disabled || isAnimating}
          onPressIn={() => console.log('üé≤ [DiceInChat] Pressable onPressIn - –ù–ê–ß–ê–õ–û –ù–ê–ñ–ê–¢–ò–Ø')}
          onPressOut={() => console.log('üé≤ [DiceInChat] Pressable onPressOut - –ö–û–ù–ï–¶ –ù–ê–ñ–ê–¢–ò–Ø')}
        >
          <Animated.Image
            style={[
              styles.image,
              {
                transform: [{ rotate: spin }, { scale: scaleValue }],
                height: diceSize,
                width: diceSize,
                opacity: 1, // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–º
              },
            ]}
            source={getImage(lastRoll)}
          />
        </Pressable>
      </View>
      
      {lastRoll > 0 && (
        <Text style={styles.lastRollText}>
          –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫: {lastRoll}
        </Text>
      )}
      
      {disabled && (
        <Text style={styles.disabledText}>
          üìù –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        </Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#f8f4ff',
    borderRadius: 12,
    padding: 16,
    margin: 8,
    borderWidth: 1,
    borderColor: '#e0d4ff',
    alignItems: 'center',
  },
  messageText: {
    textAlign: 'center',
    color: '#374151',
    fontSize: 14,
    marginBottom: 12,
    fontWeight: '500',
  },
  diceContainer: {
    alignItems: "center",
    alignSelf: "center",
    marginTop: 5,
    marginBottom: vs(4),
  },
  pressableArea: {
    alignItems: "center",
    justifyContent: "center",
    padding: 8,
    borderRadius: 12,
    backgroundColor: 'transparent',
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    minWidth: 70,
    minHeight: 70,
  },
  pressableDisabled: {
    opacity: 0.5,
  },
  image: {
    borderRadius: 8,
  },
  lastRollText: {
    textAlign: 'center',
    color: '#6b7280',
    fontSize: 12,
    marginTop: 12,
    fontWeight: '500',
  },
  disabledText: {
    textAlign: 'center',
    color: '#ea580c',
    fontSize: 12,
    marginTop: 8,
    fontWeight: '500',
  },
}); 