import React, { useRef, useState } from 'react';
import { View, Text, Animated, Easing, Pressable, Image } from 'react-native';
import { vs } from "react-native-size-matters";

interface DiceInChatProps {
  onRoll: () => Promise<number>;
  lastRoll: number;
  disabled?: boolean;
  message?: string;
}

export const DiceInChat: React.FC<DiceInChatProps> = ({ 
  onRoll, 
  lastRoll, 
  disabled = false,
  message = "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫!"
}) => {
  const spinValue = useRef(new Animated.Value(0)).current;
  const scaleValue = useRef(new Animated.Value(1)).current;
  const opacityValue = useRef(new Animated.Value(1)).current;
  const [isAnimating, setIsAnimating] = useState(false);

  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "360deg"],
  });

  const getImage = (number: number) => {
    switch (number) {
      case 1:
        return require("../../assets/dice/1.png");
      case 2:
        return require("../../assets/dice/2.png");
      case 3:
        return require("../../assets/dice/3.png");
      case 4:
        return require("../../assets/dice/4.png");
      case 5:
        return require("../../assets/dice/5.png");
      case 6:
        return require("../../assets/dice/6.png");
      default:
        return require("../../assets/dice/1.png");
    }
  };

  const animateDice = async (): Promise<void> => {
    if (disabled || isAnimating) {
      console.log('üé≤ [DiceInChat] animateDice: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', { disabled, isAnimating });
      return;
    }

    console.log('üé≤ [DiceInChat] animateDice: –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é');
    setIsAnimating(true);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è –∫—É–±–∏–∫–∞
    spinValue.setValue(0);
    Animated.timing(spinValue, {
      toValue: 1,
      duration: 800, // –ù–µ–º–Ω–æ–≥–æ –¥–æ–ª—å—à–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ
      easing: Easing.cubic,
      useNativeDriver: true,
    }).start(() => {
      // –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üé≤ [DiceInChat] –∞–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      spinValue.setValue(0);
      setIsAnimating(false);
    });

    // –ê–Ω–∏–º–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    scaleValue.setValue(1);
    Animated.sequence([
      Animated.timing(scaleValue, {
        toValue: 1.3, // –ë–æ–ª—å—à–µ –º–∞—Å—à—Ç–∞–± –¥–ª—è —á–∞—Ç–∞
        duration: 400,
        useNativeDriver: true,
      }),
      Animated.timing(scaleValue, {
        toValue: 1,
        duration: 400,
        useNativeDriver: true,
      }),
    ]).start();

    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    opacityValue.setValue(0.3);
    Animated.timing(opacityValue, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ—Å–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    try {
      console.log('üé≤ [DiceInChat] –≤—ã–∑—ã–≤–∞–µ–º onRoll...');
      const result = await onRoll();
      console.log('üé≤ [DiceInChat] onRoll –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    } catch (error) {
      console.error('üé≤ [DiceInChat] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞ –≤ —á–∞—Ç–µ:', error);
    }
  };

  return (
    <View className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 m-2 border border-purple-200">
      <Text className="text-center text-gray-700 text-sm mb-3 font-medium">
        {message}
      </Text>
      
      <View className="items-center">
        <Pressable
          onPress={animateDice}
          disabled={disabled || isAnimating}
          className={`items-center justify-center ${
            disabled || isAnimating ? 'opacity-50' : 'active:scale-95'
          }`}
          style={{
            shadowColor: '#000',
            shadowOffset: { width: 0, height: 4 },
            shadowOpacity: 0.3,
            shadowRadius: 8,
            elevation: 8,
          }}
        >
          <Animated.Image
            style={{
              transform: [{ rotate: spin }, { scale: scaleValue }],
              height: vs(60), // –†–∞–∑–º–µ—Ä –¥–ª—è —á–∞—Ç–∞
              width: vs(60),
              opacity: opacityValue,
              borderRadius: 12,
            }}
            source={getImage(lastRoll)}
          />
        </Pressable>
        
        {lastRoll > 0 && (
          <Text className="text-center text-gray-600 text-xs mt-3 font-medium">
            –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫: {lastRoll}
          </Text>
        )}
      </View>
      
      {disabled && (
        <Text className="text-center text-orange-600 text-xs mt-2 font-medium">
          üìù –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        </Text>
      )}
      
      {isAnimating && (
        <Text className="text-center text-purple-600 text-xs mt-2 font-medium animate-pulse">
          üé≤ –ö—É–±–∏–∫ –∫—Ä—É—Ç–∏—Ç—Å—è...
        </Text>
      )}
    </View>
  );
}; 