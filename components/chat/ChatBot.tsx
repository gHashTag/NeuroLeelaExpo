import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { PlanCard } from './PlanCard';
import { DiceInChat } from './DiceInChat';
import { useApolloDrizzle } from '@/hooks/useApolloDrizzle';
import { processGameStep } from '@/services/GameService';
import { markReportCompleted } from '@/lib/apollo-drizzle-client';
import { supabase } from '@/lib/supabase';
import { useSupabase } from '@/context/supabase-provider';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  toolInvocations?: ToolInvocation[];
}

interface ToolInvocation {
  toolCallId: string;
  toolName: 'createPlanCard' | 'showDice' | 'gameStatus' | 'showDiceButton' | 'showReportButton' | 'showGameResult';
  state: 'partial-call' | 'call' | 'result' | 'error';
  args?: any;
  result?: any;
}

export const ChatBot = () => {
  console.log('üéØ [ChatBot] =================== –ö–û–ú–ü–û–ù–ï–ù–¢ CHATBOT –†–ï–ù–î–ï–†–ò–¢–°–Ø ===================');
  console.log('üéØ [ChatBot] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ChatBot –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
  
  const [messages, setMessages] = useState<Message[]>([
    { 
      id: '1', 
      role: 'assistant', 
      content: '–ù–∞–º–∞—Å—Ç–µ! üôè –Ø - –õ–∏–ª–∞, –±–æ–≥–∏–Ω—è –∏–≥—Ä—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª –≤–∞—à–µ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ª—é–±–æ–º –ø–ª–∞–Ω–µ (1-72) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏!' 
    },
    // –¢–ï–°–¢–û–í–´–ô –ö–£–ë–ò–ö –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    {
      id: 'test-dice-message',
      role: 'assistant',
      content: 'üß™ –¢–ï–°–¢–û–í–´–ô –ö–£–ë–ò–ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:',
      toolInvocations: [{
        toolCallId: 'test-dice-call',
        toolName: 'showDice',
        state: 'result',
        result: {
          message: 'üé≤ –¢–ï–°–¢–û–í–´–ô –ö–£–ë–ò–ö - –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏!',
          disabled: false
        }
      }]
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [lastRoll, setLastRoll] = useState(1);
  const [historyLoaded, setHistoryLoaded] = useState(false);
  
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { currentPlayer, updatePlayerState } = useApolloDrizzle();
  const { user } = useSupabase();
  const { userData } = useSupabase();

  console.log('üéØ [ChatBot] –û–°–ù–û–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
  console.log('üéØ [ChatBot] - currentPlayer =', currentPlayer);
  console.log('üéØ [ChatBot] - user =', !!user);
  console.log('üéØ [ChatBot] - userData =', !!userData);
  console.log('üéØ [ChatBot] - messages.length =', messages.length);
  console.log('üéØ [ChatBot] - lastRoll =', lastRoll);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ
  const getPlanInfo = (planNumber: number) => {
    const plansData: Record<number, { name: string; description: string; element: string; color: string }> = {
      1: { name: "–†–æ–∂–¥–µ–Ω–∏–µ", description: "–ù–∞—á–∞–ª–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏, –ø–µ—Ä–≤–æ–µ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –¥—É—à–∏", element: "üå±", color: "green" },
      2: { name: "–ò–ª–ª—é–∑–∏—è", description: "–ú–∞–π—è - –∑–∞–≤–µ—Å–∞, —Å–∫—Ä—ã–≤–∞—é—â–∞—è –∏—Å—Ç–∏–Ω–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", element: "üé≠", color: "purple" },
      3: { name: "–ì–Ω–µ–≤", description: "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É—é—â–∞—è –¥—É—Ö–æ–≤–Ω–æ–º—É —Ä–æ—Å—Ç—É", element: "üò°", color: "red" },
      4: { name: "–ñ–∞–¥–Ω–æ—Å—Ç—å", description: "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –±–ª–∞–≥–∞–º", element: "üí∞", color: "gold" },
      5: { name: "–§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω", description: "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –º–∏—Ä –∏ —Ç–µ–ª–µ—Å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", element: "üèÉ", color: "brown" },
      6: { name: "–ó–∞–±–ª—É–∂–¥–µ–Ω–∏–µ", description: "–õ–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Ä–æ–¥–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", element: "üå´Ô∏è", color: "gray" },
      7: { name: "–¢—â–µ—Å–ª–∞–≤–∏–µ", description: "–ì–æ—Ä–¥—ã–Ω—è –∏ —ç–≥–æ–∏–∑–º, —Ä–∞–∑–¥—É–≤–∞—é—â–∏–µ –ª–æ–∂–Ω–æ–µ '—è'", element: "üëë", color: "purple" },
      8: { name: "–†–µ–≤–Ω–æ—Å—Ç—å", description: "–ó–∞–≤–∏—Å—Ç—å –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏", element: "üíö", color: "green" },
      9: { name: "–ß—É–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", description: "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è–º", element: "üåπ", color: "pink" },
      10: { name: "–û—á–∏—â–µ–Ω–∏–µ", description: "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤", element: "üßò", color: "blue" },
      11: { name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description: "–û—Ç–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏", element: "üé™", color: "orange" },
      12: { name: "–ó–º–µ—è", description: "–ö—É–Ω–¥–∞–ª–∏–Ω–∏ - –¥—É—Ö–æ–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, –≤–µ–¥—É—â–∞—è –≤–Ω–∏–∑", element: "üêç", color: "red" },
      13: { name: "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–ª–∞–Ω", description: "–û—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã", element: "üë§", color: "blue" },
      14: { name: "–ú–∏–ª–æ—Å–µ—Ä–¥–∏–µ", description: "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ –∏ –¥–æ–±—Ä–æ—Ç–∞ –∫ –∂–∏–≤—ã–º —Å—É—â–µ—Å—Ç–≤–∞–º", element: "‚ù§Ô∏è", color: "red" },
      15: { name: "–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", description: "–¢–æ–Ω–∫–∏–π –º–∏—Ä —ç–º–æ—Ü–∏–π –∏ –∂–µ–ª–∞–Ω–∏–π", element: "‚ú®", color: "violet" },
      16: { name: "–†–∞–¥–æ—Å—Ç—å", description: "–î—É—Ö–æ–≤–Ω–æ–µ –±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è", element: "üòä", color: "yellow" },
      17: { name: "–†–µ–≤–Ω–æ—Å—Ç—å", description: "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∑–∞–≤–∏—Å—Ç—å—é", element: "üíö", color: "green" },
      18: { name: "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ", description: "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π –¥—Ä—É–≥–∏—Ö", element: "ü§≤", color: "blue" },
      19: { name: "–§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", description: "–ú–∏—Ä —è–≤–ª–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º", element: "üåç", color: "green" },
      20: { name: "–î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å", description: "–ë—Ö–∞–∫—Ç–∏ - –ø—É—Ç—å –ª—é–±–≤–∏ –∫ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É", element: "üôè", color: "gold" },
      21: { name: "–ù–µ–±–µ—Å–Ω—ã–π –ø–ª–∞–Ω", description: "–í—ã—Å—à–∏–µ —Å—Ñ–µ—Ä—ã —Å–æ–∑–Ω–∞–Ω–∏—è", element: "‚òÅÔ∏è", color: "blue" },
      22: { name: "–°—Ç—Ä–µ–ª–∞", description: "–ë—ã—Å—Ç—Ä—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      23: { name: "–ù–µ–±–µ—Å–∞", description: "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–∞–∂–µ–Ω—Å—Ç–≤–∞ –∏ –ø–æ–∫–æ—è", element: "‚òÅÔ∏è", color: "blue" },
      24: { name: "–ü–ª–æ—Ö–∏–µ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏", description: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏", element: "‚ö´", color: "black" },
      25: { name: "–û—á–∏—â–µ–Ω–∏–µ", description: "–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è", element: "üßò", color: "blue" },
      26: { name: "–ú–∏–ª–æ—Å–µ—Ä–¥–∏–µ", description: "–£–≥–ª—É–±–ª–µ–Ω–∏–µ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è", element: "‚ù§Ô∏è", color: "red" },
      27: { name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å", description: "–†–∞–≤–Ω–æ–≤–µ—Å–∏–µ –º–µ–∂–¥—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏", element: "‚öñÔ∏è", color: "gray" },
      28: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ò—Å—Ç–∏–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", element: "üìö", color: "blue" },
      29: { name: "–î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å", description: "–£–≥–ª—É–±–ª–µ–Ω–∏–µ –±—Ö–∞–∫—Ç–∏", element: "üôè", color: "gold" },
      30: { name: "–•–æ—Ä–æ—à–∏–µ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏", description: "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏", element: "‚ö™", color: "white" },
      31: { name: "–û—á–∏—â–µ–Ω–∏–µ", description: "–¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—á–∏—â–µ–Ω–∏—è", element: "üßò", color: "blue" },
      32: { name: "–Ø—Å–Ω–æ—Å—Ç—å", description: "–ß–∏—Å—Ç–æ—Ç–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è", element: "üíé", color: "clear" },
      33: { name: "–†–∞–≤–Ω–æ–≤–µ—Å–∏–µ", description: "–ì–∞—Ä–º–æ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –±—ã—Ç–∏—è", element: "‚öñÔ∏è", color: "gray" },
      34: { name: "–ë–ª–∞–≥–æ—Å—Ç—å", description: "–°–∞—Ç—Ç–≤–∞ - –∫–∞—á–µ—Å—Ç–≤–æ —á–∏—Å—Ç–æ—Ç—ã –∏ —Å–≤–µ—Ç–∞", element: "üåü", color: "white" },
      35: { name: "–ú–∏–ª–æ—Å–µ—Ä–¥–∏–µ", description: "–í—ã—Å—à–µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è", element: "‚ù§Ô∏è", color: "red" },
      36: { name: "–°—Ç—Ä–µ–ª–∞", description: "–í—Ç–æ—Ä–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      37: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–£–≥–ª—É–±–ª–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏", element: "üìö", color: "blue" },
      38: { name: "–î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å", description: "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è –±—Ö–∞–∫—Ç–∏", element: "üôè", color: "gold" },
      39: { name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å", description: "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ", element: "‚öñÔ∏è", color: "gray" },
      40: { name: "–•–æ—Ä–æ—à–∏–µ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏", description: "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∫–∞—Ä–º—ã", element: "‚ö™", color: "white" },
      41: { name: "–î–æ–±—Ä—ã–µ –¥–µ–ª–∞", description: "–ö–∞—Ä–º–∞ —Å–ª—É–∂–µ–Ω–∏—è –∏ —Å–∞–º–æ–æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç–∏", element: "ü§ù", color: "gold" },
      42: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ú—É–¥—Ä–æ—Å—Ç—å –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞", element: "üìö", color: "blue" },
      43: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç –Ω–µ—Ä–µ–∞–ª—å–Ω–æ–≥–æ", element: "üîç", color: "blue" },
      44: { name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å", description: "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", element: "‚öñÔ∏è", color: "gray" },
      45: { name: "–°—Ç—Ä–µ–ª–∞", description: "–¢—Ä–µ—Ç–∏–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      46: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–£–≥–ª—É–±–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è", element: "üîç", color: "blue" },
      47: { name: "–î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å", description: "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å", element: "üôè", color: "gold" },
      48: { name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å", description: "–ü–æ–ª–Ω–∞—è –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", element: "‚öñÔ∏è", color: "gray" },
      49: { name: "–°—Ç—Ä–µ–ª–∞", description: "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      50: { name: "–≠–Ω–µ—Ä–≥–∏—è", description: "–î—É—Ö–æ–≤–Ω–∞—è —Å–∏–ª–∞ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ—Å—Ç—å", element: "‚ö°", color: "yellow" },
      51: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è", element: "üîç", color: "blue" },
      52: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", element: "üìö", color: "blue" },
      53: { name: "–≠–Ω–µ—Ä–≥–∏—è", description: "–í—ã—Å—à–∞—è –¥—É—Ö–æ–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", element: "‚ö°", color: "yellow" },
      54: { name: "–°—Ç—Ä–µ–ª–∞", description: "–ü—è—Ç—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      55: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ó–Ω–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–∞", element: "üìö", color: "blue" },
      56: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ", element: "üîç", color: "blue" },
      57: { name: "–≠–Ω–µ—Ä–≥–∏—è", description: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", element: "‚ö°", color: "yellow" },
      58: { name: "–°—Ç—Ä–µ–ª–∞", description: "–®–µ—Å—Ç–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      59: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ó–Ω–∞–Ω–∏–µ –ê–±—Å–æ–ª—é—Ç–∞", element: "üìö", color: "blue" },
      60: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ", element: "üîç", color: "blue" },
      61: { name: "–≠–Ω–µ—Ä–≥–∏—è", description: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", element: "‚ö°", color: "yellow" },
      62: { name: "–°—Ç—Ä–µ–ª–∞", description: "–°–µ–¥—å–º–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      63: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", element: "üìö", color: "blue" },
      64: { name: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ", description: "–í—ã—Å—à–µ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ", element: "üîç", color: "blue" },
      65: { name: "–≠–Ω–µ—Ä–≥–∏—è", description: "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", element: "‚ö°", color: "yellow" },
      66: { name: "–°—Ç—Ä–µ–ª–∞", description: "–í–æ—Å—å–º–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–¥—ä–µ–º", element: "üèπ", color: "gold" },
      67: { name: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", element: "üìö", color: "blue" },
      68: { name: "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ", description: "–í—ã—Å—à–µ–µ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∏ –µ–¥–∏–Ω—Å—Ç–≤–æ —Å –ê–±—Å–æ–ª—é—Ç–æ–º", element: "üïâÔ∏è", color: "violet" },
      69: { name: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–ª–∞–Ω", description: "–ü–ª–∞–Ω —á–∏—Å—Ç–æ–≥–æ –±—ã—Ç–∏—è", element: "‚àû", color: "white" },
      70: { name: "–°–∞—Ç-–ß–∏—Ç-–ê–Ω–∞–Ω–¥–∞", description: "–ë—ã—Ç–∏–µ-–°–æ–∑–Ω–∞–Ω–∏–µ-–ë–ª–∞–∂–µ–Ω—Å—Ç–≤–æ", element: "üåü", color: "gold" },
      71: { name: "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ", description: "–ó–Ω–∞–Ω–∏–µ –±–µ–∑ –æ–±—ä–µ–∫—Ç–∞", element: "üí´", color: "white" },
      72: { name: "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", description: "–ë—Ä–∞—Ö–º–∞–Ω - –≤—ã—Å—à–∞—è –∏—Å—Ç–∏–Ω–∞", element: "üîÜ", color: "gold" }
    };
    
    return plansData[planNumber] || {
      name: `–ü–ª–∞–Ω ${planNumber}`,
      description: "–û—Å–æ–±—ã–π —ç—Ç–∞–ø –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é",
      element: "‚ú®",
      color: "blue"
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞–Ω—É
  const getPlanPrompt = (planNumber: number): string => {
    const planLevel = Math.ceil(planNumber / 9); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å (1-8)
    
    switch(planLevel) {
      case 1: // 1-9 - –§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω
        return "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...";
      case 2: // 10-18 - –ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
        return "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø–æ—Ä—ã–≤—ã –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ?";
      case 3: // 19-27 - –ù–µ–±–µ—Å–Ω—ã–π –ø–ª–∞–Ω
        return "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞ –∏ –≤–æ–ª—è?";
      case 4: // 28-36 - –ü–ª–∞–Ω –±–∞–ª–∞–Ω—Å–∞
        return "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç–µ –±–∞–ª–∞–Ω—Å?";
      case 5: // 37-45 - –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–ª–∞–Ω
        return "–ö–∞–∫—É—é –∏—Å—Ç–∏–Ω—É –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã—Ä–∞–∑–∏—Ç—å?";
      case 6: // 46-54 - –ü–ª–∞–Ω –∞—Å–∫–µ—Ç–∏–∑–º–∞
        return "–ß—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≤–∑–æ—Ä—É?";
      case 7: // 55-63 - –ü–ª–∞–Ω —Å–æ–∑–Ω–∞–Ω–∏—è
        return "–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤–∞—à–µ —Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º –ø–ª–∞–Ω–µ?";
      case 8: // 64-72 - –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–ª–∞–Ω
        return "–û–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–∞ —Å –ê–±—Å–æ–ª—é—Ç–æ–º...";
      default:
        return "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...";
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  const loadChatHistory = async () => {
    if (!user || historyLoaded) return;

    try {
      const { data, error } = await supabase
        .from('chat_history')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(20); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–∏–∞–ª–æ–≥–æ–≤

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
        return;
      }

      if (data && data.length > 0) {
        const historyMessages: Message[] = [];
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        data.reverse().forEach((record) => {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          historyMessages.push({
            id: `history-user-${record.id}`,
            role: 'user',
            content: record.user_message
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
          historyMessages.push({
            id: `history-ai-${record.id}`,
            role: 'assistant',
            content: record.ai_response
          });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –Ω–∞—á–∞–ª–æ (–ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        setMessages(prev => [
          prev[0], // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          ...historyMessages,
          ...prev.slice(1) // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ]);
      }

      setHistoryLoaded(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!historyLoaded && currentPlayer) {
      console.log('üîÑ [ChatBot] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
      loadChatHistory();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage: Message = {
        id: 'welcome',
        role: 'assistant',
        content: '–ù–∞–º–∞—Å—Ç–µ! üôè –Ø - –õ–∏–ª–∞, –±–æ–≥–∏–Ω—è –∏–≥—Ä—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—É—Ç—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è!'
      };
      
      setMessages(prev => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (prev.some(msg => msg.id === 'welcome')) {
          return prev;
        }
        return [welcomeMessage, ...prev];
      });

      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞
      if (currentPlayer && !currentPlayer.needsReport) {
        setTimeout(() => {
          startGameTurn();
        }, 1000);
      } else if (currentPlayer?.needsReport) {
        // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ç—á–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–∞
        setTimeout(() => {
          addGameMessage('showReportButton', {
            planNumber: currentPlayer.plan,
            disabled: false
          });
        }, 1000);
      }
      
      setHistoryLoaded(true);
    }
  }, [currentPlayer, historyLoaded]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    console.log('üîÑ [ChatBot] useEffect: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å', {
      plan: currentPlayer?.plan,
      previous_plan: currentPlayer?.previous_plan,
      needsReport: currentPlayer?.needsReport,
      isFinished: currentPlayer?.isFinished
    });
    
    if (currentPlayer) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ø–ª–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
      if (currentPlayer.plan !== currentPlayer.previous_plan && currentPlayer.plan > 0) {
        console.log('üéØ [ChatBot] –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ø–ª–∞–Ω:', currentPlayer.plan);
        const planInfo = getPlanInfo(currentPlayer.plan);
        addGameMessage('createPlanCard', {
          type: 'plan-card',
          planNumber: currentPlayer.plan,
          planInfo,
          isCurrentPosition: true,
          timestamp: new Date().toISOString()
        }, `üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–ª–∞–Ω–∞ ${currentPlayer.plan}: "${planInfo.name}" ${planInfo.element}\n\n${planInfo.description}`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å
      if (!historyLoaded && !currentPlayer.needsReport && currentPlayer.plan > 0) {
        console.log('üé≤ [ChatBot] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫');
        if (currentPlayer.plan === 68 && currentPlayer.isFinished) {
          addGameMessage('showDice', {
            message: "üé≤ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ö–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è! –ë—Ä–æ—Å—å—Ç–µ 6, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è!",
            disabled: false
          });
        } else if (!currentPlayer.isFinished) {
          addGameMessage('showDice', {
            message: `üé≤ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? –í—ã –Ω–∞ –ø–ª–∞–Ω–µ ${currentPlayer.plan}`,
            disabled: false
          });
        }
      }
    }
  }, [currentPlayer?.plan, currentPlayer?.isFinished, currentPlayer?.previous_plan, historyLoaded]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const addSimpleMessage = (content: string) => {
    const message: Message = {
      id: `simple-${Date.now()}`,
      role: 'assistant',
      content
    };
    setMessages(prev => [message, ...prev]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const addGameMessage = (toolName: ToolInvocation['toolName'], data: any, customContent?: string) => {
    const gameMessage: Message = {
      id: `game-${Date.now()}`,
      role: 'assistant',
      content: customContent || getGameMessageContent(toolName, data),
      toolInvocations: [{
        toolCallId: `tool-${Date.now()}`,
        toolName,
        state: 'result',
        result: data
      }]
    };
    
    setMessages(prev => {
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫—É–±–∏–∫, —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫—É–±–∏–∫–∏
      if (toolName === 'showDice') {
        console.log('üé≤ [ChatBot] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É–±–∏–∫–∏');
        const filteredMessages = prev.filter(msg => {
          const hasDice = msg.toolInvocations?.some(tool => tool.toolName === 'showDice');
          if (hasDice) {
            console.log('üé≤ [ChatBot] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—É–±–∏–∫:', msg.id);
          }
          return !hasDice;
        });
        return [gameMessage, ...filteredMessages];
      }
      
      // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥—Ä—è–¥
      const firstMessage = prev[0];
      if (firstMessage?.toolInvocations?.[0]?.toolName === toolName && 
          firstMessage?.toolInvocations?.[0]?.result?.planNumber === data.planNumber) {
        return prev;
      }
      return [gameMessage, ...prev]; // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const getGameMessageContent = (toolName: ToolInvocation['toolName'], data: any): string => {
    switch (toolName) {
      case 'showDice':
        return data.message || "–í—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞! üé≤";
      case 'gameStatus':
        return data.message || "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞";
      default:
        return "–ò–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ";
    }
  };

  const handleSubmit = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim()
    };

    setMessages(prev => [userMessage, ...prev]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    const userInput = input.trim();
    setInput('');
    setIsLoading(true);

    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', userInput);
    console.log('üéÆ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:', { 
      needsReport: currentPlayer?.needsReport, 
      plan: currentPlayer?.plan,
      user: !!user 
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('TIMEOUT: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–ª–∞ –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 10 —Å–µ–∫—É–Ω–¥')), 10000);
    });

    try {
      const result = await Promise.race([
        handleSubmitCore(userInput),
        timeoutPromise
      ]);
      
      console.log('üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: Message = {
        id: `error-${Date.now()}`,
        role: 'assistant',
        content: `üôè –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. ${
          currentPlayer?.needsReport 
            ? '–í–∞—à –æ—Ç—á–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑.' 
            : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑.'
        }\n\n–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
      
      setMessages(prev => [errorMessage, ...prev]);
    } finally {
      setIsLoading(false);
      console.log('üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (finally)');
    }
  };

  // –í—ã–Ω–æ—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  const handleSubmitCore = async (userInput: string) => {
    console.log('üîç [ChatBot] handleSubmitCore: –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê');
    console.log('üîç [ChatBot] handleSubmitCore: currentPlayer?.needsReport =', currentPlayer?.needsReport);
    console.log('üîç [ChatBot] handleSubmitCore: currentPlayer?.plan =', currentPlayer?.plan);
    console.log('üîç [ChatBot] handleSubmitCore: user =', !!user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ—Ç—á–µ—Ç
    if (currentPlayer?.needsReport && user) {
      console.log('üìù [ChatBot] handleSubmitCore: –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –û–¢–ß–ï–¢ –¥–ª—è –ø–ª–∞–Ω–∞:', currentPlayer.plan);
      console.log('üìù [ChatBot] handleSubmitCore: user.id =', user.id);
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (—ç—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
      console.log('üîÑ [ChatBot] handleSubmitCore: –í—ã–∑—ã–≤–∞–µ–º markReportCompleted...');
      try {
        await markReportCompleted(user.id);
        console.log('‚úÖ [ChatBot] handleSubmitCore: markReportCompleted –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
        console.log('üîç [ChatBot] handleSubmitCore: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ markReportCompleted');
        console.log('üîç [ChatBot] handleSubmitCore: currentPlayer?.needsReport –ø–æ—Å–ª–µ markReportCompleted =', currentPlayer?.needsReport);
        
      } catch (markError) {
        console.error('‚ö†Ô∏è [ChatBot] handleSubmitCore: –û–®–ò–ë–ö–ê markReportCompleted:', markError);
      }

      // –°–æ–∑–¥–∞–µ–º –¥—É—Ö–æ–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –õ–∏–ª—ã –∫ –æ—Ç—á–µ—Ç—É
      const planInfo = getPlanInfo(currentPlayer.plan);
      const spiritualCommentary = generateSpiritualCommentary(userInput, currentPlayer.plan, planInfo);

      console.log('üí¨ [ChatBot] handleSubmitCore: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –õ–∏–ª—ã');

      const responseMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: spiritualCommentary
      };

      setMessages(prev => [responseMessage, ...prev]);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
      console.log('üíæ [ChatBot] handleSubmitCore: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ...');
      saveReportInBackground(userInput, spiritualCommentary);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–±–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
      console.log('üé≤ [ChatBot] handleSubmitCore: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–±–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞...');
      console.log('üé≤ [ChatBot] handleSubmitCore: currentPlayer.plan =', currentPlayer.plan);
      console.log('üé≤ [ChatBot] handleSubmitCore: currentPlayer.isFinished =', currentPlayer.isFinished);
      
      const nextStepMessage = currentPlayer.plan === 68 && currentPlayer.isFinished 
        ? "üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ö–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –°–æ–∑–Ω–∞–Ω–∏—è! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è?"
        : "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –Ω–∞ –ø—É—Ç–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.";
        
      const diceMessage = currentPlayer.plan === 68 && currentPlayer.isFinished
        ? "üé≤ –ë—Ä–æ—Å—å—Ç–µ 6, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è!"
        : "üé≤ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!";

      console.log('üé≤ [ChatBot] handleSubmitCore: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–±–∏–∫ —á–µ—Ä–µ–∑ addGameMessage');
      console.log('üé≤ [ChatBot] handleSubmitCore: diceMessage =', diceMessage);
      
      addGameMessage('showDice', {
        message: diceMessage,
        disabled: false
      }, nextStepMessage);

      return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—ã–ª –æ—Ç—á–µ—Ç
    } else {
      console.log('ü§î [ChatBot] handleSubmitCore: –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ö –û–¢–ß–ï–¢');
      console.log('ü§î [ChatBot] handleSubmitCore: –ü—Ä–∏—á–∏–Ω—ã:');
      console.log('ü§î [ChatBot] handleSubmitCore: - currentPlayer?.needsReport =', currentPlayer?.needsReport);
      console.log('ü§î [ChatBot] handleSubmitCore: - user =', !!user);
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω)
    console.log('üí≠ [ChatBot] handleSubmitCore: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ API
    const mockResponse = generateMockResponse(userInput);
    setMessages(prev => [mockResponse, ...prev]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ —Ñ–æ–Ω–µ
    if (user) {
      saveHistoryInBackground(userInput, mockResponse.content, 'question');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ
  const saveReportInBackground = async (userInput: string, aiResponse: string) => {
    if (!user || !currentPlayer) return;

    try {
      console.log('üîÑ –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      const reportSavePromise = supabase
        .from("reports")
        .insert({
          user_id: user.id,
          plan_number: currentPlayer.plan,
          content: userInput,
          likes: 0,
          comments: 0
        })
        .select()
        .single();

      const reportTimeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Background save timeout')), 2000);
      });

      const { data: reportData } = await Promise.race([
        reportSavePromise,
        reportTimeoutPromise
      ]) as any;

      console.log('‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ–Ω–µ:', reportData?.id);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      await supabase
        .from("chat_history")
        .insert({
          user_id: user.id,
          plan_number: currentPlayer.plan,
          user_message: userInput,
          ai_response: aiResponse,
          report_id: reportData?.id,
          message_type: 'report'
        });

      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ');

    } catch (error) {
      console.warn('‚ö†Ô∏è –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∑–∂–µ
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ–Ω–µ
  const saveHistoryInBackground = async (userInput: string, aiResponse: string, messageType: string) => {
    if (!user || !currentPlayer) return;

    try {
      console.log('üîÑ –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...');
      
      const historySavePromise = supabase
        .from("chat_history")
        .insert({
          user_id: user.id,
          plan_number: currentPlayer.plan || 1,
          user_message: userInput,
          ai_response: aiResponse,
          message_type: messageType
        });

      const historyTimeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Background history save timeout')), 2000);
      });

      await Promise.race([historySavePromise, historyTimeoutPromise]);
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ');

    } catch (error) {
      console.warn('‚ö†Ô∏è –§–æ–Ω–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –õ–∏–ª—ã
  const generateMockResponse = (userInput: string): Message => {
    const input = userInput.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–µ
    const planMatch = input.match(/–ø–ª–∞–Ω\s*(\d+)|–ø–æ–∑–∏—Ü–∏—è\s*(\d+)|(\d+)/);
    const planNumber = planMatch ? parseInt(planMatch[1] || planMatch[2] || planMatch[3]) : null;
    
    let content = '';
    let toolInvocations: ToolInvocation[] = [];
    
    if (planNumber && planNumber >= 1 && planNumber <= 72) {
      content = `–ù–∞–º–∞—Å—Ç–µ! üôè –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ –ø–ª–∞–Ω–µ ${planNumber}. –≠—Ç–æ –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ø—É—Ç–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.`;
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ tool invocation –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞
      const planInfo = getPlanInfo(planNumber);
      toolInvocations = [{
        toolCallId: `mock-${Date.now()}`,
        toolName: 'createPlanCard',
        state: 'result',
        result: {
          type: 'plan-card',
          planNumber,
          planInfo,
          isCurrentPosition: false,
          timestamp: new Date().toISOString()
        }
      }];
    } else if (input.includes('–ø—Ä–∏–≤–µ—Ç') || input.includes('hi') || input.includes('hello')) {
      content = '–ù–∞–º–∞—Å—Ç–µ! üôè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è! –Ø - –õ–∏–ª–∞, –≤–∞—à –¥—É—Ö–æ–≤–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ª—é–±–æ–º –ø–ª–∞–Ω–µ (1-72) –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –¥—É—Ö–æ–≤–Ω–æ–º –ø—É—Ç–∏.';
    } else if (input.includes('–ø–æ–º–æ—â—å') || input.includes('help')) {
      content = '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∏–≥—Ä—ã –õ–∏–ª–∞! üé≠\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n‚Ä¢ "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–ª–∞–Ω 10?"\n‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ 23"\n‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –ø–ª–∞–Ω 68"\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –¥—É—Ö–æ–≤–Ω–æ–º –ø—É—Ç–∏! ‚ú®';
    } else {
      content = '–ù–∞–º–∞—Å—Ç–µ! üôè –í–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–µ—Å—É—Ç –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª. –í –∏–≥—Ä–µ –õ–∏–ª–∞ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –∏–≥—Ä—ã.';
    }
    
    return {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content,
      toolInvocations: toolInvocations.length > 0 ? toolInvocations : undefined
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –õ–∏–ª—ã –∫ –æ—Ç—á–µ—Ç—É
  const generateSpiritualCommentary = (userReport: string, planNumber: number, planInfo: any): string => {
    const reportLength = userReport.length;
    const hasDeepReflection = userReport.toLowerCase().includes('—á—É–≤—Å—Ç–≤—É—é') || 
                             userReport.toLowerCase().includes('–ø–æ–Ω–∏–º–∞—é') || 
                             userReport.toLowerCase().includes('–æ—Å–æ–∑–Ω–∞—é') ||
                             userReport.toLowerCase().includes('–æ—â—É—â–∞—é');
    
    // –ë–∞–∑–æ–≤—ã–µ –¥—É—Ö–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
    const spiritualWisdom = [
      `üôè –ù–∞–º–∞—Å—Ç–µ! –í–∞—à –æ—Ç—á–µ—Ç –æ –ø–ª–∞–Ω–µ ${planNumber} "${planInfo.name}" –Ω–∞–ø–æ–ª–Ω–µ–Ω –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é.`,
      `‚ú® –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ "${planInfo.name}". –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å.`,
      `üïâÔ∏è –í–∞—à –æ–ø—ã—Ç –Ω–∞ –ø–ª–∞–Ω–µ ${planNumber} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –≤–∞—à–µ–≥–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.`,
      `üåü –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–∞—à–∏ –º—ã—Å–ª–∏ –æ "${planInfo.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –º—É–¥—Ä–æ—Å—Ç—å –¥—É—à–∏.`
    ];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–∞
    const qualityComments = reportLength > 100 && hasDeepReflection 
      ? [
          "–í–∞—à–∞ –≥–ª—É–±–æ–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏.",
          "–Ø –≤–∏–∂—É, –∫–∞–∫ –≤—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ —Å–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
          "–í–∞—à–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º –ø–ª–∞–Ω–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏."
        ]
      : [
          "–ö–∞–∂–¥—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è —Ü–µ–Ω–µ–Ω, –¥–∞–∂–µ —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π.",
          "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.",
          "–í–∞—à–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –¥–ª–∏–Ω—ã –æ—Ç—á–µ—Ç–∞."
        ];

    // –ú—É–¥—Ä–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –ø–ª–∞–Ω–∞
    const planWisdom = planNumber <= 9 
      ? "–ù–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö –≤–∞–∂–Ω–æ –∑–∞–ª–æ–∂–∏—Ç—å –∫—Ä–µ–ø–∫–∏–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è."
      : planNumber <= 36 
      ? "–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤–∞–∂–Ω—ã–µ —É—Ä–æ–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è."
      : planNumber <= 54
      ? "–≠—Ç–∏ –ø–ª–∞–Ω—ã —É—á–∞—Ç –≤–∞—Å –±–∞–ª–∞–Ω—Å—É –º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –∏ –¥—É—Ö–æ–≤–Ω—ã–º."
      : "–í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –≤—ã—Å—à–∏–º –ø–ª–∞–Ω–∞–º —Å–æ–∑–Ω–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π —à–∞–≥ —Ç–µ–ø–µ—Ä—å –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω.";

    // –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
    const motivation = [
      "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–æ–π –ø—É—Ç—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–µ—Ä–¥—Ü–µ–º! üíñ",
      "–ö–∞–∂–¥—ã–π –≤–∞—à —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º—É —Å–æ–∑–Ω–∞–Ω–∏—é! üåå",
      "–í–∞—à–∞ –¥—É—à–∞ —Ä–∞—Å—Ç–µ—Ç –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –ø–ª–∞–Ω–æ–º! üå±",
      "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å—É - –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–µ–¥–µ—Ç –≤–∞—Å –∫ –∏—Å—Ç–∏–Ω–µ! ‚ú®"
    ];

    // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const randomWisdom = spiritualWisdom[Math.floor(Math.random() * spiritualWisdom.length)];
    const randomQuality = qualityComments[Math.floor(Math.random() * qualityComments.length)];
    const randomMotivation = motivation[Math.floor(Math.random() * motivation.length)];

    return `${randomWisdom}

${randomQuality} ${planWisdom}

${randomMotivation}`;
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const startGameTurn = () => {
    console.log('üéÆ [ChatBot] startGameTurn: –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ–¥');
    
    if (!currentPlayer) {
      console.error('üéÆ [ChatBot] startGameTurn: –Ω–µ—Ç currentPlayer');
      return;
    }

    const message = currentPlayer.plan === 68 && currentPlayer.isFinished
      ? "üé≤ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –±—Ä–æ—Å—å—Ç–µ 6!"
      : "üé≤ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –Ω–∞ –ø—É—Ç–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è?";

    addGameMessage('showDiceButton', {
      message,
      disabled: false
    });
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const handleNewDiceRoll = async (): Promise<void> => {
    console.log('üé≤ [ChatBot] handleNewDiceRoll: –ù–ê–ß–ê–õ–û');
    
    if (!currentPlayer) {
      console.error('üé≤ [ChatBot] handleNewDiceRoll: –Ω–µ—Ç currentPlayer');
      return;
    }

    const roll = Math.floor(Math.random() * 6) + 1;
    console.log('üé≤ [ChatBot] handleNewDiceRoll: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±—Ä–æ—Å–æ–∫:', roll);
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º lastRoll –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setLastRoll(roll);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º userId
      const userId = user?.id || userData?.user_id || 'test-user-demo';
      console.log('üé≤ [ChatBot] handleNewDiceRoll: –∏—Å–ø–æ–ª—å–∑—É–µ–º userId:', userId);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
      console.log('üé≤ [ChatBot] handleNewDiceRoll: –≤—ã–∑—ã–≤–∞–µ–º processGameStep...');
      const result = await processGameStep(roll, userId);
      console.log('üéÆ [ChatBot] handleNewDiceRoll: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞:', result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      const updatedPlayer = {
        ...currentPlayer,
        plan: result.gameStep.loka,
        previous_plan: result.gameStep.previous_loka,
        consecutiveSixes: result.gameStep.consecutive_sixes,
        positionBeforeThreeSixes: result.gameStep.position_before_three_sixes,
        isFinished: result.gameStep.is_finished,
        needsReport: result.gameStep.loka !== result.gameStep.previous_loka && !result.gameStep.is_finished,
        message: result.message
      };
      
      console.log('üé≤ [ChatBot] handleNewDiceRoll: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:', updatedPlayer);
      updatePlayerState(updatedPlayer);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      addGameMessage('showGameResult', {
        roll,
        fromPlan: result.gameStep.previous_loka,
        toPlan: result.gameStep.loka,
        direction: result.direction,
        message: result.message
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
      const planInfo = getPlanInfo(updatedPlayer.plan);
      const planMessage: Message = {
        id: `plan-description-${Date.now()}`,
        role: 'assistant',
        content: `üìç **–ü–ª–∞–Ω ${updatedPlayer.plan}: "${planInfo.name}"**\n\n${planInfo.description}\n\nüí≠ –†–∞–∑–º—ã—à–ª—è–π—Ç–µ –æ–± —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –≤–∞—à –¥—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å.`,
        toolInvocations: [{
          toolCallId: `plan-card-${Date.now()}`,
          toolName: 'createPlanCard',
          state: 'result',
          result: {
            type: 'plan-card',
            planNumber: updatedPlayer.plan,
            planInfo,
            isCurrentPosition: true,
            timestamp: new Date().toISOString()
          }
        }]
      };
      
      setMessages(prev => [planMessage, ...prev]);

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ç—á–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–∞
      if (updatedPlayer.needsReport) {
        setTimeout(() => {
          addGameMessage('showReportButton', {
            planNumber: updatedPlayer.plan,
            disabled: false
          });
        }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
      } else {
        // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
        setTimeout(() => {
          startGameTurn();
        }, 2000);
      }
      
    } catch (error) {
      console.error('üé≤ [ChatBot] handleNewDiceRoll: –æ—à–∏–±–∫–∞:', error);
      const errorMessage: Message = {
        id: `dice-error-${Date.now()}`,
        role: 'assistant',
        content: `üé≤ –í—ã–ø–∞–ª–æ ${roll}, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
      };
      setMessages(prev => [errorMessage, ...prev]);
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
  const startReportWriting = () => {
    console.log('üìù [ChatBot] startReportWriting: –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞');
    
    if (!currentPlayer) {
      console.error('üìù [ChatBot] startReportWriting: –Ω–µ—Ç currentPlayer');
      return;
    }

    const planInfo = getPlanInfo(currentPlayer.plan);
    const prompt = getPlanPrompt(currentPlayer.plan);
    
    const reportMessage: Message = {
      id: `report-request-${Date.now()}`,
      role: 'assistant',
      content: `üìù **–í—Ä–µ–º—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø–ª–∞–Ω–µ ${currentPlayer.plan}: "${planInfo.name}"**\n\n${prompt}\n\nüí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.`
    };
    
    setMessages(prev => [reportMessage, ...prev]);
  };

  const renderToolInvocation = (toolInvocation: ToolInvocation) => {
    const { toolName, state, result } = toolInvocation;

    if (state === 'result' && result) {
      switch (toolName) {
        case 'createPlanCard':
          return (
            <PlanCard
              key={toolInvocation.toolCallId}
              planNumber={result.planNumber}
              planInfo={result.planInfo}
              isCurrentPosition={result.isCurrentPosition}
            />
          );
        
        case 'showDice':
          console.log('üé≤ [ChatBot] ================ renderToolInvocation: –°–û–ó–î–ê–ï–ú DiceInChat ================');
          console.log('üé≤ [ChatBot] renderToolInvocation: result =', result);
          console.log('üé≤ [ChatBot] renderToolInvocation: result.disabled =', result.disabled);
          console.log('üé≤ [ChatBot] renderToolInvocation: currentPlayer?.needsReport =', currentPlayer?.needsReport);
          console.log('üé≤ [ChatBot] renderToolInvocation: currentPlayer =', currentPlayer);
          
          const finalDisabled = result.disabled || (currentPlayer?.needsReport ?? false);
          console.log('üé≤ [ChatBot] renderToolInvocation: –ò–¢–û–ì–û–í–´–ô disabled =', finalDisabled);
          console.log('üé≤ [ChatBot] renderToolInvocation: –ü–†–ò–ß–ò–ù–ê disabled:', {
            'result.disabled': result.disabled,
            'needsReport': currentPlayer?.needsReport,
            '–∏—Ç–æ–≥': finalDisabled
          });
          
          return (
            <DiceInChat
              key={toolInvocation.toolCallId}
              onRoll={handleNewDiceRoll}
              lastRoll={lastRoll}
              disabled={finalDisabled}
              message={result.message}
            />
          );

        case 'showDiceButton':
          return (
            <DiceButton
              key={toolInvocation.toolCallId}
              onRoll={handleNewDiceRoll}
              disabled={result.disabled}
              message={result.message}
            />
          );

        case 'showGameResult':
          return (
            <GameResult
              key={toolInvocation.toolCallId}
              roll={result.roll}
              fromPlan={result.fromPlan}
              toPlan={result.toPlan}
              direction={result.direction}
              message={result.message}
            />
          );

        case 'showReportButton':
          return (
            <ReportButton
              key={toolInvocation.toolCallId}
              onReport={startReportWriting}
              planNumber={result.planNumber}
              disabled={result.disabled}
            />
          );
        
        default:
          return null;
      }
    }

    if (state !== 'result') {
      return (
        <View key={toolInvocation.toolCallId} className="bg-purple-50 rounded-lg p-3 m-2">
          <Text className="text-purple-600 text-sm">
            {toolName === 'createPlanCard' ? 'üé¥ –°–æ–∑–¥–∞—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–ª–∞–Ω–∞...' : 
             toolName === 'showDice' ? 'üé≤ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫—É–±–∏–∫...' :
             toolName === 'showDiceButton' ? 'üé≤ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞...' :
             toolName === 'showGameResult' ? 'üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...' :
             toolName === 'showReportButton' ? 'üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–æ—Ä–º—É –æ—Ç—á–µ—Ç–∞...' :
             '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...'}
          </Text>
        </View>
      );
    }

    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const clearChatHistory = () => {
    setMessages([
      { 
        id: '1', 
        role: 'assistant', 
        content: '–ù–∞–º–∞—Å—Ç–µ! üôè –Ø - –õ–∏–ª–∞, –±–æ–≥–∏–Ω—è –∏–≥—Ä—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª –≤–∞—à–µ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ª—é–±–æ–º –ø–ª–∞–Ω–µ (1-72) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏!' 
      },
    ]);
    setHistoryLoaded(false);
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const DiceButton: React.FC<{ onRoll: () => Promise<void>; disabled?: boolean; message?: string }> = ({ 
    onRoll, 
    disabled = false, 
    message = "üé≤ –ì–æ—Ç–æ–≤—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫?" 
  }) => {
    const [isRolling, setIsRolling] = useState(false);

    const handleRoll = async () => {
      if (disabled || isRolling) return;
      
      setIsRolling(true);
      try {
        await onRoll();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞:', error);
      } finally {
        setIsRolling(false);
      }
    };

    return (
      <View className="bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg p-4 m-2">
        <Text className="text-white text-center mb-3">{message}</Text>
        <TouchableOpacity
          onPress={handleRoll}
          disabled={disabled || isRolling}
          className={`bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg py-3 px-6 ${
            disabled || isRolling ? 'opacity-50' : ''
          }`}
        >
          <Text className="text-white text-center font-semibold">
            {isRolling ? 'üé≤ –ë—Ä–æ—Å–∞—é...' : 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞
  const GameResult: React.FC<{ 
    roll: number; 
    fromPlan: number; 
    toPlan: number; 
    direction: string;
    message: string;
  }> = ({ roll, fromPlan, toPlan, direction, message }) => {
    return (
      <View className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-4 m-2 border border-green-200">
        <Text className="text-lg font-bold text-green-800 text-center mb-2">
          üé≤ –í—ã–ø–∞–ª–æ: {roll}
        </Text>
        <Text className="text-gray-700 text-center mb-2">
          –ü–µ—Ä–µ—Ö–æ–¥: –ü–ª–∞–Ω {fromPlan} ‚Üí –ü–ª–∞–Ω {toPlan}
        </Text>
        <Text className="text-gray-600 text-center text-sm mb-2">
          –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
        </Text>
        <Text className="text-gray-700 text-center">
          {message}
        </Text>
      </View>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
  const ReportButton: React.FC<{ onReport: () => void; planNumber: number; disabled?: boolean }> = ({ 
    onReport, 
    planNumber, 
    disabled = false 
  }) => {
    return (
      <View className="bg-gradient-to-r from-orange-50 to-yellow-50 rounded-lg p-4 m-2">
        <Text className="text-gray-700 text-center mb-3">
          üìù –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –æ –ø–ª–∞–Ω–µ {planNumber}
        </Text>
        <TouchableOpacity
          onPress={onReport}
          disabled={disabled}
          className={`bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg py-3 px-6 ${
            disabled ? 'opacity-50' : ''
          }`}
        >
          <Text className="text-white text-center font-semibold">
            üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <View className="flex-1 bg-white flex flex-col overflow-hidden">
      <View className="bg-gradient-to-r from-purple-50 to-blue-50 p-3 border-b border-gray-100">
        <View className="flex-row justify-between items-center">
          <View className="flex-1">
            <Text className="text-base font-medium text-gray-700">üïâÔ∏è –õ–∏–ª–∞ - –î—É—Ö–æ–≤–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫</Text>
            {currentPlayer && (
              <Text className="text-xs text-gray-500 mt-1">
                {currentPlayer.needsReport 
                  ? `üìù –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç –æ –ø–ª–∞–Ω–µ ${currentPlayer.plan}` 
                  : `üé≤ –ü–ª–∞–Ω ${currentPlayer.plan} ‚Ä¢ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É`
                }
              </Text>
            )}
          </View>
          <TouchableOpacity 
            onPress={clearChatHistory}
            className="bg-purple-100 rounded-full p-2"
          >
            <Ionicons name="refresh" size={16} color="#6A0DAD" />
          </TouchableOpacity>
        </View>
      </View>
      
      <ScrollView className="flex-1 p-3">
        {isLoading && (
          <View className="items-start flex flex-row mb-3">
            <View className="bg-gradient-to-r from-purple-100 to-blue-100 rounded-lg px-4 py-2 shadow-sm">
              <Text className="text-gray-600">–õ–∏–ª–∞ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç... ü§î</Text>
            </View>
          </View>
        )}
        
        {messages.map((msg) => (
          <View key={msg.id}>
          <View 
              className={`mb-3 ${msg.role === 'user' ? 'items-end' : 'items-start'} flex flex-row`}
          >
            <View 
              className={`rounded-lg px-4 py-2 max-w-[85%] ${
                  msg.role === 'user' 
                  ? 'bg-blue-500 ml-auto shadow-sm' 
                    : 'bg-gradient-to-r from-purple-100 to-blue-100 shadow-sm'
              }`}
            >
              <Text 
                  className={msg.role === 'user' ? 'text-white' : 'text-gray-800'}
              >
                  {msg.content}
              </Text>
              </View>
            </View>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ tool invocations */}
            {msg.toolInvocations && (
              <View className="mb-3">
                {msg.toolInvocations.map(renderToolInvocation)}
              </View>
            )}
          </View>
        ))}
      </ScrollView>
      
      <View className="border-t border-gray-100 p-3">
        <View className="flex-row items-center">
        <TextInput
            value={input}
            onChangeText={setInput}
            placeholder={
              currentPlayer?.needsReport 
                ? "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç –æ –¥—É—Ö–æ–≤–Ω–æ–º –æ–ø—ã—Ç–µ..."
                : "–°–ø—Ä–æ—Å–∏—Ç–µ –æ –ø–ª–∞–Ω–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—ã—Å–ª—è–º–∏..."
            }
          placeholderTextColor="rgba(107,114,128,0.5)"
          className="flex-1 bg-gray-50 rounded-full px-4 py-2 mr-2 text-gray-700"
            editable={!isLoading}
            onSubmitEditing={handleSubmit}
        />
        <TouchableOpacity 
            onPress={handleSubmit} 
            disabled={isLoading}
            className={`rounded-full p-2 shadow-sm ${
              isLoading ? 'bg-gray-300' : 'bg-gradient-to-r from-purple-500 to-blue-500'
            }`}
          >
            <Ionicons 
              name={isLoading ? "hourglass" : "send"} 
              size={16} 
              color="white" 
            />
        </TouchableOpacity>
        </View>
      </View>
    </View>
  );
}; 