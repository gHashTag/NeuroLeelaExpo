import { Platform } from 'react-native';
import Constants from 'expo-constants';

console.log('üöÄ Loading environment variables...');

const extra = Constants.expoConfig?.extra;

if (!extra) {
  console.error('‚ùå No environment variables found in expo config!');
  throw new Error('Environment variables not loaded');
}

console.log('‚úÖ Environment variables loaded successfully');

// Clean and validate JWT token
const cleanJwtToken = (token: string | undefined) => {
  if (!token) {
    console.error('‚ùå JWT token is missing!');
    throw new Error('JWT token is required');
  }
  return token.trim();
};

(() => {
  const jwt = extra.pinataJwt;
  if (jwt) {
    console.log(`‚ÑπÔ∏è JWT token length: ${jwt.length}`);
    console.log(`‚ÑπÔ∏è JWT token first 50 chars: ${jwt.substring(0, 50)}...`);
    console.log('‚úÖ JWT token loaded and cleaned');
  }
})();

// Log Pinata keys status
console.log(`‚ÑπÔ∏è Pinata API Key: ${extra.pinataApiKey ? '‚úÖ Set' : '‚ùå Missing'}`);
console.log(`‚ÑπÔ∏è Pinata Secret Key: ${extra.pinataSecretKey ? '‚úÖ Set' : '‚ùå Missing'}`);
console.log(`‚ÑπÔ∏è Pinata Gateway URL: ${extra.pinataGatewayUrl ? '‚úÖ Set' : '‚ùå Missing'}`);

export const PINATA = {
  JWT: cleanJwtToken(extra.pinataJwt),
  GATEWAY_URL: extra.pinataGatewayUrl || 'https://gateway.pinata.cloud/ipfs/',
  API_KEY: extra.pinataApiKey,
  SECRET_KEY: extra.pinataSecretKey
};

export const SUPABASE = {
  URL: extra.supabaseUrl,
  SERVICE_KEY: extra.supabaseServiceKey
};

export * from "./colors";
export * from "./dimensions";

// Debug environment variables
console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
console.log('üì¶ process.env:', process.env);

// Pinata configuration
const rawJWT = process.env.EXPO_PUBLIC_PINATA_JWT || '';
console.log('üîç Raw JWT —Ç–æ–∫–µ–Ω:', {
  value: rawJWT.substring(0, 20) + '...',
  length: rawJWT.length,
  type: typeof rawJWT,
  isEmpty: !rawJWT,
  hasNewlines: rawJWT.includes('\n'),
  hasCarriageReturns: rawJWT.includes('\r')
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const cleanJWT = (token: string): string => {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É JWT —Ç–æ–∫–µ–Ω–∞');
  console.log('üìù –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞:', token.length);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—á–∏—Å—Ç–∫—É
  const simpleClean = token
    .replace(/\\n/g, '')     // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    .replace(/[\n\r]/g, '')  // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    .replace(/\s+/g, '')     // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .trim();                 // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

  // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
  if (!simpleClean || simpleClean.split('.').length !== 3) {
    console.log('‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É');
    return token.split('').filter(char => {
      const code = char.charCodeAt(0);
      return code > 32 || char === '.';  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç–æ—á–∫–∏
    }).join('');
  }

  return simpleClean;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
const validateJWT = (token: string): boolean => {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞');
  console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ç–æ–∫–µ–Ω:', {
    value: token.substring(0, 20) + '...',
    length: token.length,
    parts: token.split('.').length
  });
  
  if (!token) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π');
    return false;
  }
  
  const parts = token.split('.');
  console.log('üìù –ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞:', parts.map(p => ({ length: p.length })));
  
  if (parts.length !== 3) {
    console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —á–∞—Å—Ç–∏');
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    
    if (!part) {
      console.error(`‚ùå –ß–∞—Å—Ç—å ${i + 1} –ø—É—Å—Ç–∞—è`);
      return false;
    }
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      const prepared = part
        .replace(/-/g, '+')
        .replace(/_/g, '/');
      
      // –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      const padding = prepared.length % 4;
      const padded = padding ? prepared + '='.repeat(4 - padding) : prepared;
      
      const decoded = atob(padded);
      console.log(`‚úÖ –ß–∞—Å—Ç—å ${i + 1} –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞:`, {
        originalLength: part.length,
        preparedLength: prepared.length,
        paddedLength: padded.length,
        decodedLength: decoded.length
      });
      
      if (i === 1) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        const payload = JSON.parse(decoded);
        console.log('‚úÖ Payload –≤–∞–ª–∏–¥–µ–Ω:', {
          keys: Object.keys(payload),
          size: JSON.stringify(payload).length
        });
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ ${i + 1}:`, error);
      return false;
    }
  }
  
  return true;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
const cleanedJWT = cleanJWT(rawJWT);
console.log('üîç JWT —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', {
  value: cleanedJWT.substring(0, 20) + '...',
  length: cleanedJWT.length,
  parts: cleanedJWT.split('.').length
});

export const PINATA_JWT = (() => {
  console.log('üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º EXPO_PUBLIC_PINATA_JWT');
  const jwt = process.env.EXPO_PUBLIC_PINATA_JWT;
  
  if (!jwt) {
    console.error('‚ùå EXPO_PUBLIC_PINATA_JWT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ process.env');
    return null;
  }

  console.log('üìù –î–ª–∏–Ω–∞ JWT —Ç–æ–∫–µ–Ω–∞:', jwt.length);
  console.log('üìù –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ JWT:', jwt.substring(0, 50));

  // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanedJwt = jwt
    .replace(/\s+/g, '')
    .replace(/\\n/g, '')
    .replace(/\n/g, '')
    .replace(/\r/g, '');

  console.log('üìù –î–ª–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ JWT:', cleanedJwt.length);
  console.log('üìù –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ JWT:', cleanedJwt.substring(0, 50));

  return cleanedJwt;
})();

export const PINATA_API_KEY = process.env.EXPO_PUBLIC_PINATA_API_KEY || '';
export const PINATA_SECRET_KEY = process.env.EXPO_PUBLIC_PINATA_SECRET_KEY || '';
export const PINATA_GATEWAY_URL = process.env.EXPO_PUBLIC_PINATA_GATEWAY_URL || '';
if (!PINATA_GATEWAY_URL) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PINATA_GATEWAY_URL');
}

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('üîê –ö–ª—é—á–∏ Pinata:');
console.log('- API Key:', PINATA_API_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('- Secret Key:', PINATA_SECRET_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('- Gateway URL:', PINATA_GATEWAY_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('- JWT:', PINATA_JWT ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
