import { inngest } from '../client';
import { supabase } from '@/config/supabase';
import { currentPlayerVar } from '@/lib/apollo-drizzle-client';
import { GameMessageService, GameContext } from '@/services/GameMessageService';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const TOTAL_PLANS = 72;
const WIN_LOKA = 68;
const MAX_ROLL = 6;
const START_LOKA = 6;

// –¢–∏–ø—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
interface GameStep {
  loka: number;
  previous_loka: number;
  direction: string;
  consecutive_sixes: number;
  position_before_three_sixes: number;
  is_finished: boolean;
}

interface Plan {
  short_desc: string;
  image: string;
  name: string;
}

// –ö–∞—Ä—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const directionMap: { [key: string]: { ru: string; en: string } } = {
  'stop üõë': { ru: '–°—Ç–æ–ø üõë', en: 'Stop üõë' },
  'arrow üèπ': { ru: '–°—Ç—Ä–µ–ª–∞ üèπ', en: 'Arrow üèπ' },
  'snake üêç': { ru: '–ó–º–µ—è üêç', en: 'Snake üêç' },
  'win üïâ': { ru: '–ü–æ–±–µ–¥–∞ üïâ', en: 'Win üïâ' },
  'step üö∂üèº': { ru: '–®–∞–≥ üö∂üèº', en: 'Step üö∂üèº' },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ
const getPlan = (planNumber: number, languageCode: string): Plan => {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ API –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  return {
    short_desc: `–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ ${planNumber}`,
    image: '',
    name: `–ü–ª–∞–Ω ${planNumber}`
  };
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —à–µ—Å—Ç–µ—Ä–æ–∫
const handleConsecutiveSixes = (
  roll: number, 
  currentLoka: number,
  consecutive: number, 
  positionBeforeThreeSixes: number
) => {
  console.log(`[Inngest] handleConsecutiveSixes: roll=${roll}, currentLoka=${currentLoka}, consecutive=${consecutive}`);
  
  if (roll !== MAX_ROLL) {
    return { 
      newConsecutive: 0, 
      newPosition: currentLoka + roll,
      newBeforeThreeSixes: positionBeforeThreeSixes 
    };
  }

  const newConsecutive = consecutive + 1;
  
  if (newConsecutive === 3) {
    console.log(`[Inngest] –¢–†–ï–¢–¨–Ø –®–ï–°–¢–ï–†–ö–ê! –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${positionBeforeThreeSixes}`);
    return { 
      newConsecutive: 0, 
      newPosition: positionBeforeThreeSixes,
      newBeforeThreeSixes: positionBeforeThreeSixes,
      direction: 'snake üêç' 
    };
  }
  
  const newPosition = currentLoka + roll;
  const newBeforeThreeSixes = consecutive === 0 ? currentLoka : positionBeforeThreeSixes;
  
  return { 
    newConsecutive, 
    newPosition: newPosition,
    newBeforeThreeSixes: newBeforeThreeSixes 
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
const getDirectionAndPosition = (
  newLoka: number, 
  isFinished: boolean,
  roll: number,
  currentLoka: number
) => {
  console.log(`[Inngest] getDirectionAndPosition: newLoka=${newLoka}, isFinished=${isFinished}, roll=${roll}`);
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  if (currentLoka === WIN_LOKA && isFinished) {
    if (roll === MAX_ROLL) {
      console.log(`[Inngest] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã! –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ ${START_LOKA}`);
      return { 
        finalLoka: START_LOKA,
        direction: 'step üö∂üèº', 
        isGameFinished: false 
      };
    }
    return { 
      finalLoka: WIN_LOKA, 
      direction: 'stop üõë', 
      isGameFinished: true
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
  if (newLoka === WIN_LOKA) {
    console.log(`[Inngest] –ü–û–ë–ï–î–ê! –ü–æ–∑–∏—Ü–∏—è ${WIN_LOKA}`);
    return { 
      finalLoka: newLoka, 
      direction: 'win üïâ', 
      isGameFinished: true 
    };
  }

  // –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
  if (newLoka > TOTAL_PLANS) {
    console.log(`[Inngest] –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã: ${newLoka} > ${TOTAL_PLANS}`);
    return { 
      finalLoka: currentLoka, 
      direction: 'stop üõë', 
      isGameFinished: false 
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–µ–ª (–ø—Ä–∏–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π —Å–æ —Å—Ç—Ä–µ–ª–∞–º–∏)
  const arrowPositions: { [key: number]: number } = {
    4: 14, 9: 31, 17: 7, 20: 38, 28: 84, 40: 59,
    51: 67, 54: 34, 62: 19, 63: 81, 64: 60, 71: 91
  };

  if (arrowPositions[newLoka]) {
    const arrowTarget = arrowPositions[newLoka];
    console.log(`[Inngest] –°—Ç—Ä–µ–ª–∞! ${newLoka} -> ${arrowTarget}`);
    return { 
      finalLoka: Math.min(arrowTarget, TOTAL_PLANS), 
      direction: 'arrow üèπ', 
      isGameFinished: arrowTarget === WIN_LOKA 
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–º–µ–π (–ø—Ä–∏–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π —Å–æ –∑–º–µ—è–º–∏)
  const snakePositions: { [key: number]: number } = {
    16: 6, 47: 26, 49: 11, 56: 53, 62: 19, 64: 60, 87: 24, 93: 73, 95: 75, 98: 78
  };

  if (snakePositions[newLoka]) {
    const snakeTarget = snakePositions[newLoka];
    console.log(`[Inngest] –ó–º–µ—è! ${newLoka} -> ${snakeTarget}`);
    return { 
      finalLoka: snakeTarget, 
      direction: 'snake üêç', 
      isGameFinished: false 
    };
  }

  // –û–±—ã—á–Ω—ã–π —Ö–æ–¥
  return { 
    finalLoka: newLoka, 
    direction: 'step üö∂üèº', 
    isGameFinished: false 
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è Inngest —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
export const processDiceRoll = inngest.createFunction(
  { 
    id: 'process-dice-roll',
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞'
  },
  { event: 'game.dice.roll' },
  async ({ event, step }) => {
    const { userId, roll } = event.data;
    
    console.log(`[Inngest] processDiceRoll: userId=${userId}, roll=${roll}`);

    // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const currentState = await step.run('get-player-state', async () => {
      const { data: player, error } = await supabase
        .from('players')
        .select('*')
        .eq('id', userId)
        .single();

      if (error || !player) {
        console.log(`[Inngest] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ`);
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
          id: userId,
          plan: WIN_LOKA,
          previous_plan: 0,
          message: '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è',
          avatar: null,
          fullName: null,
          intention: null,
          isStart: false,
          isFinished: true,
          consecutiveSixes: 0,
          positionBeforeThreeSixes: 0,
          needsReport: false
        };

        const { data: createdPlayer } = await supabase
          .from('players')
          .insert([newPlayer])
          .select()
          .single();

        return createdPlayer || newPlayer;
      }

      return player;
    });

    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    const gameResult = await step.run('process-game-logic', async () => {
      const languageCode = 'en';
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      if (currentState.plan === WIN_LOKA && currentState.isFinished === true && roll === MAX_ROLL) {
        const gameStep: GameStep = {
          loka: START_LOKA,
          previous_loka: WIN_LOKA,
          direction: 'step üö∂üèº',
          consecutive_sixes: 0,
          position_before_three_sixes: 0,
          is_finished: false,
        };

        const newPlan = getPlan(START_LOKA, languageCode);
        const messageContext: GameContext = {
          currentPlan: START_LOKA,
          previousPlan: WIN_LOKA,
          roll,
          direction: 'step üö∂üèº',
          isFinished: false,
          consecutiveSixes: 0
        };
        const gameMessage = GameMessageService.generateMessage(messageContext);

        return {
          gameStep,
          plan: newPlan,
          direction: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üéÆ',
          message: gameMessage.text,
        };
      }

      // –û–∂–∏–¥–∞–Ω–∏–µ —à–µ—Å—Ç–µ—Ä–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
      if (currentState.plan === WIN_LOKA && currentState.isFinished === true && roll !== MAX_ROLL) {
        const gameStep: GameStep = {
          loka: WIN_LOKA,
          previous_loka: currentState.previous_plan,
          direction: 'stop üõë',
          consecutive_sixes: 0,
          position_before_three_sixes: 0,
          is_finished: true,
        };

        const newPlan = getPlan(WIN_LOKA, languageCode);
        const messageContext: GameContext = {
          currentPlan: WIN_LOKA,
          previousPlan: currentState.previous_plan,
          roll,
          direction: 'stop üõë',
          isFinished: true,
          consecutiveSixes: 0
        };
        const gameMessage = GameMessageService.generateMessage(messageContext);

        return {
          gameStep,
          plan: newPlan,
          direction: '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 6! üé≤',
          message: gameMessage.text,
        };
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      const { 
        newConsecutive, 
        newPosition, 
        newBeforeThreeSixes, 
        direction: sixesDirection 
      } = handleConsecutiveSixes(
        roll, 
        currentState.plan, 
        currentState.consecutiveSixes, 
        currentState.positionBeforeThreeSixes
      );

      const { 
        finalLoka, 
        direction: finalDirection, 
        isGameFinished 
      } = getDirectionAndPosition(
        newPosition, 
        currentState.isFinished, 
        roll,
        currentState.plan
      );

      const direction = sixesDirection || finalDirection;

      const gameStep: GameStep = {
        loka: finalLoka,
        previous_loka: currentState.plan,
        direction,
        consecutive_sixes: newConsecutive,
        position_before_three_sixes: newBeforeThreeSixes,
        is_finished: isGameFinished,
      };

      const newPlan = getPlan(finalLoka, languageCode);
      const localizedDirection = 
        directionMap[direction]?.[languageCode as 'en' | 'ru'] || 
        directionMap[direction]?.['en'] || 
        direction;

      const messageContext: GameContext = {
        currentPlan: finalLoka,
        previousPlan: currentState.plan,
        roll,
        direction,
        isFinished: isGameFinished,
        consecutiveSixes: newConsecutive
      };
      const gameMessage = GameMessageService.generateMessage(messageContext);

      return {
        gameStep,
        plan: newPlan,
        direction: localizedDirection,
        message: gameMessage.text,
      };
    });

    // –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await step.run('save-to-database', async () => {
      const { gameStep, message } = gameResult;
      
      const needsReport = gameStep.loka !== gameStep.previous_loka && !gameStep.is_finished;
      
      const updates = {
        plan: gameStep.loka,
        previous_plan: gameStep.previous_loka,
        isFinished: gameStep.is_finished,
        consecutiveSixes: gameStep.consecutive_sixes,
        positionBeforeThreeSixes: gameStep.position_before_three_sixes,
        needsReport: needsReport,
        message: message
      };

      const { error } = await supabase
        .from('players')
        .update(updates)
        .eq('id', userId);

      if (error) {
        console.error(`[Inngest] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, error);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
      }

      console.log(`[Inngest] –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:`, updates);
      return updates;
    });

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await step.sendEvent('send-state-update', {
      name: 'game.player.state.update',
      data: {
        userId,
        updates: {
          plan: gameResult.gameStep.loka,
          previous_plan: gameResult.gameStep.previous_loka,
          isFinished: gameResult.gameStep.is_finished,
          needsReport: gameResult.gameStep.loka !== gameResult.gameStep.previous_loka && !gameResult.gameStep.is_finished,
          message: gameResult.message,
          consecutiveSixes: gameResult.gameStep.consecutive_sixes,
          positionBeforeThreeSixes: gameResult.gameStep.position_before_three_sixes,
        },
        timestamp: Date.now()
      }
    });

    console.log(`[Inngest] processDiceRoll –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, gameResult);
    
    return {
      success: true,
      userId,
      roll,
      gameResult
    };
  }
); 