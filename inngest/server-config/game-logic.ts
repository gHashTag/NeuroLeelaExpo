// –°–µ—Ä–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è NeuroLeela –±–µ–∑ React Native –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
export const TOTAL_PLANS = 72;
export const WIN_LOKA = 68;
export const MAX_ROLL = 6;
export const START_LOKA = 6;

// –¢–∏–ø—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
export interface GameStep {
  loka: number;
  previous_loka: number;
  direction: string;
  consecutive_sixes: number;
  position_before_three_sixes: number;
  is_finished: boolean;
}

export interface Plan {
  short_desc: string;
  image: string;
  name: string;
}

export interface GameContext {
  currentPlan: number;
  previousPlan: number;
  roll: number;
  direction: string;
  isFinished: boolean;
  consecutiveSixes: number;
}

// –ö–∞—Ä—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const directionMap: { [key: string]: { ru: string; en: string } } = {
  'stop üõë': { ru: '–°—Ç–æ–ø üõë', en: 'Stop üõë' },
  'arrow üèπ': { ru: '–°—Ç—Ä–µ–ª–∞ üèπ', en: 'Arrow üèπ' },
  'snake üêç': { ru: '–ó–º–µ—è üêç', en: 'Snake üêç' },
  'win üïâ': { ru: '–ü–æ–±–µ–¥–∞ üïâ', en: 'Win üïâ' },
  'step üö∂üèº': { ru: '–®–∞–≥ üö∂üèº', en: 'Step üö∂üèº' },
};

// –ü–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
const arrowPositions: { [key: number]: number } = {
  4: 14, 9: 31, 17: 7, 20: 38, 28: 84, 40: 59,
  51: 67, 54: 34, 62: 19, 63: 81, 64: 60, 71: 91
};

// –ü–æ–∑–∏—Ü–∏–∏ –∑–º–µ–π (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥)
const snakePositions: { [key: number]: number } = {
  16: 6, 47: 26, 49: 11, 56: 53, 62: 19, 64: 60, 
  87: 24, 93: 73, 95: 75, 98: 78
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ
export const getPlan = (planNumber: number, languageCode: string = 'en'): Plan => {
  return {
    short_desc: `–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ ${planNumber}`,
    image: '',
    name: `–ü–ª–∞–Ω ${planNumber}`
  };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export class ServerGameMessageService {
  static generateMessage(context: GameContext): { text: string } {
    const { currentPlan, previousPlan, roll, direction, isFinished, consecutiveSixes } = context;
    
    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    if (previousPlan === WIN_LOKA && currentPlan === START_LOKA) {
      return { text: `üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –±—Ä–æ—Å–∏–ª–∏ ${roll} –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—É—Ç—å —Å –ø–ª–∞–Ω–∞ ${START_LOKA}. –£–¥–∞—á–∏ –≤ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏!` };
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞
    if (currentPlan === WIN_LOKA && isFinished) {
      if (roll === MAX_ROLL) {
        return { text: `üéâ –û–¢–õ–ò–ß–ù–û! –í—ã–ø–∞–ª–∞ —à–µ—Å—Ç–µ—Ä–∫–∞! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å - –¥–≤–∏–∂–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω ${START_LOKA}!` };
      } else {
        return { text: `üòî –í—ã–ø–∞–ª–æ ${roll}, –∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–∞ —à–µ—Å—Ç–µ—Ä–∫–∞ (6). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!` };
      }
    }
    
    // –ü–æ–±–µ–¥–∞
    if (direction === 'win üïâ') {
      return { text: `üïâÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–∞–Ω–µ ${WIN_LOKA}! –ü—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω.` };
    }
    
    // –ó–º–µ—è
    if (direction === 'snake üêç') {
      return { text: `üêç –ó–º–µ—è! –í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å —Å –ø–ª–∞–Ω–∞ ${previousPlan} –Ω–∞ –ø–ª–∞–Ω ${currentPlan}. –≠—Ç–æ —É—Ä–æ–∫ —Å–º–∏—Ä–µ–Ω–∏—è.` };
    }
    
    // –°—Ç—Ä–µ–ª–∞
    if (direction === 'arrow üèπ') {
      return { text: `üèπ –°—Ç—Ä–µ–ª–∞! –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–∞ ${previousPlan} –Ω–∞ –ø–ª–∞–Ω ${currentPlan}. –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!` };
    }
    
    // –¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥
    if (consecutiveSixes === 0 && previousPlan > currentPlan && roll === MAX_ROLL) {
      return { text: `üêç –¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥! –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é ${currentPlan}. –ì–æ—Ä–¥—ã–Ω—è –Ω–∞–∫–∞–∑–∞–Ω–∞.` };
    }
    
    // –°—Ç–æ–ø (–≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
    if (direction === 'stop üõë') {
      return { text: `üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–ª–∞–Ω–µ ${currentPlan}. –¢–µ—Ä–ø–µ–Ω–∏–µ - –∫–ª—é—á –∫ –º—É–¥—Ä–æ—Å—Ç–∏.` };
    }
    
    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥
    return { text: `üö∂üèº –û–±—ã—á–Ω—ã–π —Ö–æ–¥ —Å –ø–ª–∞–Ω–∞ ${previousPlan} –Ω–∞ –ø–ª–∞–Ω ${currentPlan}. –í—ã –±—Ä–æ—Å–∏–ª–∏ ${roll}.` };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —à–µ—Å—Ç–µ—Ä–æ–∫
export const handleConsecutiveSixes = (
  roll: number, 
  currentLoka: number,
  consecutive: number, 
  positionBeforeThreeSixes: number
) => {
  console.log(`[GameLogic] handleConsecutiveSixes: roll=${roll}, currentLoka=${currentLoka}, consecutive=${consecutive}`);
  
  if (roll !== MAX_ROLL) {
    return { 
      newConsecutive: 0, 
      newPosition: currentLoka + roll,
      newBeforeThreeSixes: positionBeforeThreeSixes 
    };
  }

  const newConsecutive = consecutive + 1;
  
  if (newConsecutive === 3) {
    console.log(`[GameLogic] –¢–†–ï–¢–¨–Ø –®–ï–°–¢–ï–†–ö–ê! –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${positionBeforeThreeSixes}`);
    return { 
      newConsecutive: 0, 
      newPosition: positionBeforeThreeSixes,
      newBeforeThreeSixes: positionBeforeThreeSixes,
      direction: 'snake üêç' 
    };
  }
  
  const newPosition = currentLoka + roll;
  const newBeforeThreeSixes = consecutive === 0 ? currentLoka : positionBeforeThreeSixes;
  
  return { 
    newConsecutive, 
    newPosition: newPosition,
    newBeforeThreeSixes: newBeforeThreeSixes 
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
export const getDirectionAndPosition = (
  newLoka: number, 
  isFinished: boolean,
  roll: number,
  currentLoka: number
) => {
  console.log(`[GameLogic] getDirectionAndPosition: newLoka=${newLoka}, isFinished=${isFinished}, roll=${roll}`);
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  if (currentLoka === WIN_LOKA && isFinished) {
    if (roll === MAX_ROLL) {
      console.log(`[GameLogic] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã! –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ ${START_LOKA}`);
      return { 
        finalLoka: START_LOKA,
        direction: 'step üö∂üèº', 
        isGameFinished: false 
      };
    }
    return { 
      finalLoka: WIN_LOKA, 
      direction: 'stop üõë', 
      isGameFinished: true
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
  if (newLoka === WIN_LOKA) {
    console.log(`[GameLogic] –ü–û–ë–ï–î–ê! –ü–æ–∑–∏—Ü–∏—è ${WIN_LOKA}`);
    return { 
      finalLoka: newLoka, 
      direction: 'win üïâ', 
      isGameFinished: true 
    };
  }

  // –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
  if (newLoka > TOTAL_PLANS) {
    console.log(`[GameLogic] –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã: ${newLoka} > ${TOTAL_PLANS}`);
    return { 
      finalLoka: currentLoka, 
      direction: 'stop üõë', 
      isGameFinished: false 
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–µ–ª
  if (arrowPositions[newLoka]) {
    const arrowTarget = arrowPositions[newLoka];
    console.log(`[GameLogic] –°—Ç—Ä–µ–ª–∞! ${newLoka} -> ${arrowTarget}`);
    return { 
      finalLoka: Math.min(arrowTarget, TOTAL_PLANS), 
      direction: 'arrow üèπ', 
      isGameFinished: arrowTarget === WIN_LOKA 
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–º–µ–π
  if (snakePositions[newLoka]) {
    const snakeTarget = snakePositions[newLoka];
    console.log(`[GameLogic] –ó–º–µ—è! ${newLoka} -> ${snakeTarget}`);
    return { 
      finalLoka: snakeTarget, 
      direction: 'snake üêç', 
      isGameFinished: false 
    };
  }

  // –û–±—ã—á–Ω—ã–π —Ö–æ–¥
  return { 
    finalLoka: newLoka, 
    direction: 'step üö∂üèº', 
    isGameFinished: false 
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–¥–∞
export const processGameMove = (
  currentPlayer: {
    id: string;
    plan: number;
    previous_plan: number | null;
    message: string | null;
    avatar: string | null;
    fullName: string | null;
    intention: string | null;
    isStart: boolean | null;
    isFinished: boolean | null;
    consecutiveSixes: number | null;
    positionBeforeThreeSixes: number | null;
    needsReport: boolean | null;
  },
  roll: number,
  languageCode: string = 'en'
): {
  gameStep: GameStep;
  plan: Plan;
  direction: string;
  message: string;
} => {
  console.log(`[GameLogic] processGameMove: player=${currentPlayer.id}, roll=${roll}, plan=${currentPlayer.plan}`);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  if (currentPlayer.plan === WIN_LOKA && currentPlayer.isFinished === true && roll === MAX_ROLL) {
    const gameStep: GameStep = {
      loka: START_LOKA,
      previous_loka: currentPlayer.previous_plan || WIN_LOKA,
      direction: 'step üö∂üèº',
      consecutive_sixes: 0,
      position_before_three_sixes: 0,
      is_finished: false,
    };

    const newPlan = getPlan(START_LOKA, languageCode);
    const messageContext: GameContext = {
      currentPlan: START_LOKA,
      previousPlan: currentPlayer.previous_plan || WIN_LOKA,
      roll,
      direction: 'step üö∂üèº',
      isFinished: false,
      consecutiveSixes: 0
    };
    const gameMessage = ServerGameMessageService.generateMessage(messageContext);

    return {
      gameStep,
      plan: newPlan,
      direction: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üéÆ',
      message: gameMessage.text,
    };
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ —à–µ—Å—Ç–µ—Ä–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
  if (currentPlayer.plan === WIN_LOKA && currentPlayer.isFinished === true && roll !== MAX_ROLL) {
    const gameStep: GameStep = {
      loka: WIN_LOKA,
      previous_loka: currentPlayer.previous_plan || 0,
      direction: 'stop üõë',
      consecutive_sixes: 0,
      position_before_three_sixes: 0,
      is_finished: true,
    };

    const newPlan = getPlan(WIN_LOKA, languageCode);
    const messageContext: GameContext = {
      currentPlan: WIN_LOKA,
      previousPlan: currentPlayer.previous_plan || 0,
      roll,
      direction: 'stop üõë',
      isFinished: true,
      consecutiveSixes: 0
    };
    const gameMessage = ServerGameMessageService.generateMessage(messageContext);

    return {
      gameStep,
      plan: newPlan,
      direction: '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å 6! üé≤',
      message: gameMessage.text,
    };
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  const { 
    newConsecutive, 
    newPosition, 
    newBeforeThreeSixes, 
    direction: sixesDirection 
  } = handleConsecutiveSixes(
    roll, 
    currentPlayer.plan, 
    currentPlayer.consecutiveSixes || 0, 
    currentPlayer.positionBeforeThreeSixes || 0
  );

  const { 
    finalLoka, 
    direction: finalDirection, 
    isGameFinished 
  } = getDirectionAndPosition(
    newPosition, 
    currentPlayer.isFinished || false, 
    roll,
    currentPlayer.plan
  );

  const direction = sixesDirection || finalDirection;

  const gameStep: GameStep = {
    loka: finalLoka,
    previous_loka: currentPlayer.plan,
    direction,
    consecutive_sixes: newConsecutive,
    position_before_three_sixes: newBeforeThreeSixes,
    is_finished: isGameFinished,
  };

  const newPlan = getPlan(finalLoka, languageCode);
  const localizedDirection = 
    directionMap[direction]?.[languageCode as 'en' | 'ru'] || 
    directionMap[direction]?.['en'] || 
    direction;

  const messageContext: GameContext = {
    currentPlan: finalLoka,
    previousPlan: currentPlayer.plan,
    roll,
    direction,
    isFinished: isGameFinished,
    consecutiveSixes: newConsecutive
  };
  const gameMessage = ServerGameMessageService.generateMessage(messageContext);

  return {
    gameStep,
    plan: newPlan,
    direction: localizedDirection,
    message: gameMessage.text,
  };
}; 