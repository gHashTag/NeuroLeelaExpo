// –°–µ—Ä–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Neon PostgreSQL
import { Pool } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import { players, reports, chatHistory, type Player, type NewPlayer, type Report, type NewReport } from '../../db/schema';
import { eq } from 'drizzle-orm';

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è Neon
const databaseUrl = process.env.EXPO_PUBLIC_DATABASE_URL;

if (!databaseUrl) {
  throw new Error(`
    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Neon PostgreSQL:
    - DATABASE_URL: ${databaseUrl ? '‚úÖ' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    
    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è EXPO_PUBLIC_DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
  `);
}

console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL:', databaseUrl.replace(/:[^:]*@/, ':***@'));

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL –¥–ª—è Neon
export const pgPool = new Pool({
  connectionString: databaseUrl,
  ssl: {
    rejectUnauthorized: false, // Neon —Ç—Ä–µ–±—É–µ—Ç SSL
  },
  max: 10, // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// –°–æ–∑–¥–∞–µ–º Drizzle ORM –∫–ª–∏–µ–Ω—Ç
export const db = drizzle(pgPool);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ —Å—Ö–µ–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–µ—Ä–µ
export type ServerPlayer = Player;
export type ServerNewPlayer = NewPlayer;
export type ServerReport = Report;
export type ServerNewReport = NewReport;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ Drizzle ORM
export class ServerPlayerService {
  // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID
  static async getPlayer(userId: string): Promise<ServerPlayer | null> {
    try {
      const result = await db.select().from(players).where(eq(players.id, userId)).limit(1);
      
      if (result.length === 0) {
        console.log(`[NeonDB] –ò–≥—Ä–æ–∫ ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      console.log(`[NeonDB] –ò–≥—Ä–æ–∫ ${userId} –Ω–∞–π–¥–µ–Ω`);
      return result[0];
    } catch (error) {
      console.error(`[NeonDB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${userId}:`, error);
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static async createPlayer(playerData: ServerNewPlayer): Promise<ServerPlayer | null> {
    try {
      const result = await db.insert(players).values(playerData).returning();
      
      if (result.length === 0) {
        console.error(`[NeonDB] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞`);
        return null;
      }

      console.log(`[NeonDB] –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:`, result[0]);
      return result[0];
    } catch (error) {
      console.error(`[NeonDB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:`, error);
      return null;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
  static async updatePlayer(userId: string, updates: Partial<ServerNewPlayer>): Promise<boolean> {
    try {
      const result = await db.update(players)
        .set(updates)
        .where(eq(players.id, userId))
        .returning();

      if (result.length === 0) {
        console.error(`[NeonDB] –ò–≥—Ä–æ–∫ ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        return false;
      }

      console.log(`[NeonDB] –ò–≥—Ä–æ–∫ ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, updates);
      return true;
    } catch (error) {
      console.error(`[NeonDB] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${userId}:`, error);
      return false;
    }
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Drizzle ORM
export class ServerReportService {
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
  static async saveReport(reportData: ServerNewReport): Promise<ServerReport | null> {
    try {
      const result = await db.insert(reports).values(reportData).returning();
      
      if (result.length === 0) {
        console.error(`[NeonDB] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç`);
        return null;
      }

      console.log(`[NeonDB] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:`, result[0]);
      return result[0];
    } catch (error) {
      console.error(`[NeonDB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:`, error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –∏–≥—Ä–æ–∫–∞
  static async getPlayerReports(userId: string): Promise<ServerReport[]> {
    try {
      const result = await db.select().from(reports).where(eq(reports.user_id, userId));
      
      console.log(`[NeonDB] –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è ${userId}: ${result.length}`);
      return result;
    } catch (error) {
      console.error(`[NeonDB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è ${userId}:`, error);
      return [];
    }
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon
export async function testServerDatabaseConnection(): Promise<boolean> {
  try {
    console.log(`[NeonDB] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon PostgreSQL...`);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const result = await db.select().from(players).limit(1);

    console.log(`[NeonDB] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`[NeonDB] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.length >= 0 ? '–¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞' : '–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞'}`);
    return true;
  } catch (err) {
    console.error(`[NeonDB] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon:`, err);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è graceful shutdown)
export async function closeDatabaseConnections(): Promise<void> {
  try {
    await pgPool.end();
    console.log('[NeonDB] üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  } catch (error) {
    console.error('[NeonDB] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', error);
  }
} 