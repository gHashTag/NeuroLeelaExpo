// –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Inngest —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
import { Inngest } from 'inngest';
import { 
  ServerPlayerService, 
  ServerReportService,
  ServerPlayer,
  testServerDatabaseConnection 
} from '../server-config/database';
import { 
  processGameMove,
  WIN_LOKA 
} from '../server-config/game-logic';

// –ò–º–ø–æ—Ä—Ç Zod —Å—Ö–µ–º
import {
  validateDiceRollEventData,
  validateReportSubmitEventData,
  validatePlayerStateUpdateEventData,
  validatePlayerInitEventData,
  validateDiceRollResponse,
  validateReportResponse,
  validatePlayerStateUpdateResponse,
  validatePlayerInitResponse,
  DiceRollEventData,
  ReportSubmitEventData,
  PlayerStateUpdateEventData,
  PlayerInitEventData,
  DiceRollFunctionResponse,
  ReportFunctionResponse,
  PlayerStateUpdateFunctionResponse,
  PlayerInitFunctionResponse
} from '../../types/schemas';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
const inngest = new Inngest({ 
  id: 'neuroleela-app',
  name: 'NeuroLeela Game'
});

// 1. –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ (—Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
export const processDiceRoll = inngest.createFunction(
  { 
    id: 'process-dice-roll',
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞'
  },
  { event: 'game.dice.roll' },
  async ({ event, step }) => {
    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData: DiceRollEventData = await step.run('validate-input', async () => {
      try {
        return validateDiceRollEventData(event.data);
      } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    const { userId, roll } = validatedData;
    
    console.log(`[ServerInngest] processDiceRoll: userId=${userId}, roll=${roll}`);

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    await step.run('check-database-connection', async () => {
      const isConnected = await testServerDatabaseConnection();
      if (!isConnected) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      console.log(`[ServerInngest] ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
    });

    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const currentState = await step.run('get-player-state', async () => {
      let player = await ServerPlayerService.getPlayer(userId);

      if (!player) {
        console.log(`[ServerInngest] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ`);
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const newPlayerData = {
          id: userId,
          plan: WIN_LOKA,
          previous_plan: 0,
          message: '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è',
          avatar: null,
          fullName: null,
          intention: null,
          isStart: false,
          isFinished: true,
          consecutiveSixes: 0,
          positionBeforeThreeSixes: 0,
          needsReport: false
        };

        player = await ServerPlayerService.createPlayer(newPlayerData);
        if (!player) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
        }
      }

      return player;
    });

    // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    const gameResult = await step.run('process-game-logic', async () => {
      const result = processGameMove(currentState, roll, 'en');
      console.log(`[ServerInngest] –ò–≥—Ä–æ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
      return result;
    });

    // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await step.run('save-to-database', async () => {
      const { gameStep, message } = gameResult;
      
      const needsReport = gameStep.loka !== gameStep.previous_loka && !gameStep.is_finished;
      
      const updates = {
        plan: gameStep.loka,
        previous_plan: gameStep.previous_loka,
        isFinished: gameStep.is_finished,
        consecutiveSixes: gameStep.consecutive_sixes,
        positionBeforeThreeSixes: gameStep.position_before_three_sixes,
        needsReport: needsReport,
        message: message
      };

      const success = await ServerPlayerService.updatePlayer(userId, updates);
      if (!success) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      }

      console.log(`[ServerInngest] –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:`, updates);
      return updates;
    });

    // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await step.sendEvent('send-state-update', {
      name: 'game.player.state.update',
      data: {
        userId,
        updates: {
          plan: gameResult.gameStep.loka,
          previous_plan: gameResult.gameStep.previous_loka,
          isFinished: gameResult.gameStep.is_finished,
          needsReport: gameResult.gameStep.loka !== gameResult.gameStep.previous_loka && !gameResult.gameStep.is_finished,
          message: gameResult.message,
          consecutiveSixes: gameResult.gameStep.consecutive_sixes,
          positionBeforeThreeSixes: gameResult.gameStep.position_before_three_sixes,
        },
        timestamp: Date.now()
      }
    });

    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response: DiceRollFunctionResponse = {
      success: true,
      userId,
      roll,
      gameResult,
      message: `Dice roll ${roll} processed successfully`
    };

    const validatedResponse = await step.run('validate-response', async () => {
      try {
        return validateDiceRollResponse(response);
      } catch (error) {
        console.error(`[ServerInngest] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:`, error);
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    console.log(`[ServerInngest] processDiceRoll –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
    return validatedResponse;
  }
);

// 2. –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ (—Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
export const processReport = inngest.createFunction(
  {
    id: 'process-report',
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞'
  },
  { event: 'game.report.submit' },
  async ({ event, step }) => {
    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData: ReportSubmitEventData = await step.run('validate-input', async () => {
      try {
        return validateReportSubmitEventData(event.data);
      } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    const { userId, report, planNumber } = validatedData;
    
    console.log(`[ServerInngest] processReport: userId=${userId}, planNumber=${planNumber}`);

    // –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await step.run('save-report', async () => {
      const reportData = {
        user_id: userId,
        plan_number: planNumber,
        content: report,
        likes: 0,
        comments: 0
      };

      const savedReport = await ServerReportService.saveReport(reportData);
      if (!savedReport) {
        console.log(`[ServerInngest] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
      }

      console.log(`[ServerInngest] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ ${planNumber}`);
      return savedReport;
    });

    // –®–∞–≥ 2: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—É–±–∏–∫–∞ (—É–±–∏—Ä–∞–µ–º needsReport)
    await step.run('unlock-dice', async () => {
      const success = await ServerPlayerService.updatePlayer(userId, {
        needsReport: false,
        message: '–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.'
      });

      if (!success) {
        throw new Error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—É–±–∏–∫–∞');
      }

      console.log(`[ServerInngest] –ö—É–±–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${userId}`);
    });

    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await step.sendEvent('send-state-update', {
      name: 'game.player.state.update',
      data: {
        userId,
        updates: {
          needsReport: false,
          message: '–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.'
        },
        timestamp: Date.now()
      }
    });

    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response: ReportFunctionResponse = {
      success: true,
      userId,
      planNumber,
      reportSaved: true,
      diceUnlocked: true,
      message: `Report for plan ${planNumber} processed successfully`
    };

    const validatedResponse = await step.run('validate-response', async () => {
      try {
        return validateReportResponse(response);
      } catch (error) {
        console.error(`[ServerInngest] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:`, error);
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    console.log(`[ServerInngest] processReport –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
    return validatedResponse;
  }
);

// 3. –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (—Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
export const updatePlayerState = inngest.createFunction(
  {
    id: 'update-player-state',
    name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞'
  },
  { event: 'game.player.state.update' },
  async ({ event, step }) => {
    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData: PlayerStateUpdateEventData = await step.run('validate-input', async () => {
      try {
        return validatePlayerStateUpdateEventData(event.data);
      } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    const { userId, updates } = validatedData;
    
    console.log(`[ServerInngest] updatePlayerState: userId=${userId}, updates=`, updates);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Apollo –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏)
    await step.run('update-state', async () => {
      // –í —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WebSocket —Å–æ–±—ã—Ç–∏—è –∏ —Ç.–¥.
      console.log(`[ServerInngest] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ:`, updates);
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      return true;
    });

    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response: PlayerStateUpdateFunctionResponse = {
      success: true,
      userId,
      updatesApplied: updates,
      message: `Player state updated successfully`
    };

    const validatedResponse = await step.run('validate-response', async () => {
      try {
        return validatePlayerStateUpdateResponse(response);
      } catch (error) {
        console.error(`[ServerInngest] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:`, error);
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    return validatedResponse;
  }
);

// 4. –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ (—Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
export const initializePlayer = inngest.createFunction(
  {
    id: 'initialize-player',
    name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞'
  },
  { event: 'game.player.init' },
  async ({ event, step }) => {
    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData: PlayerInitEventData = await step.run('validate-input', async () => {
      try {
        return validatePlayerInitEventData(event.data);
      } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    const { userId, email } = validatedData;
    
    console.log(`[ServerInngest] initializePlayer: userId=${userId}, email=${email}`);

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const existingPlayer = await step.run('check-existing-player', async () => {
      const player = await ServerPlayerService.getPlayer(userId);
      if (player) {
        console.log(`[ServerInngest] –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, player);
        return player;
      }
      return null;
    });

    if (existingPlayer) {
      // –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await step.sendEvent('send-state-update', {
        name: 'game.player.state.update',
        data: {
          userId,
          updates: existingPlayer,
          timestamp: Date.now()
        }
      });

      // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const response: PlayerInitFunctionResponse = {
        success: true,
        userId,
        playerCreated: false,
        existingPlayer: true,
        message: `Player ${userId} already exists`
      };

      const validatedResponse = await step.run('validate-response', async () => {
        try {
          return validatePlayerInitResponse(response);
        } catch (error) {
          console.error(`[ServerInngest] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:`, error);
          throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      });

      return validatedResponse;
    }

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const newPlayer = await step.run('create-new-player', async () => {
      const playerData = {
        id: userId,
        plan: WIN_LOKA, // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        previous_plan: 0,
        message: '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è',
        avatar: null,
        fullName: null,
        intention: null,
        isStart: false,
        isFinished: true, // –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∂–¥–µ–º 6 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
        consecutiveSixes: 0,
        positionBeforeThreeSixes: 0,
        needsReport: false
      };

      const createdPlayer = await ServerPlayerService.createPlayer(playerData);
      if (!createdPlayer) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
      }

      console.log(`[ServerInngest] –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:`, createdPlayer);
      return createdPlayer;
    });

    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await step.sendEvent('send-state-update', {
      name: 'game.player.state.update',
      data: {
        userId,
        updates: newPlayer,
        timestamp: Date.now()
      }
    });

    // üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const response: PlayerInitFunctionResponse = {
      success: true,
      userId,
      playerCreated: true,
      newPlayer: newPlayer,
      message: `Player ${userId} initialized successfully`
    };

    const validatedResponse = await step.run('validate-response', async () => {
      try {
        return validatePlayerInitResponse(response);
      } catch (error) {
        console.error(`[ServerInngest] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:`, error);
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    console.log(`[ServerInngest] initializePlayer –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
    return validatedResponse;
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
export const serverFunctions = [
  processDiceRoll,
  processReport,
  updatePlayerState,
  initializePlayer
]; 