import React, { useState, useEffect, useRef } from "react";
import { View, ScrollView, ImageBackground, TouchableOpacity, RefreshControl, Image, ActivityIndicator, Platform } from "react-native";
import { Header } from "@/components/layout/Header";
import { ReportPost } from "@/components/reports/ReportPost";
import { Text } from "@/components/ui/text";
import Icon from "@expo/vector-icons/MaterialCommunityIcons";
import { supabase } from "@/config/supabase";
import { useSupabase } from "@/context/supabase-provider";
import { useGameState } from "@/context/game-state-provider";
import { LinearGradient } from "expo-linear-gradient";
import { Feather } from "@expo/vector-icons";

interface Post {
  id: string;
  plan_number: number;
  content: string;
  created_at: string;
  likes: number;
  comments: number;
}

export default function Reports() {
  const [isRulesVisible, setIsRulesVisible] = useState(false);
  const [reportsPosts, setReportsPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState("all");
  const { user } = useSupabase();
  const { currentPlayer, loading: gameStateLoading } = useGameState();

  const fetchReports = async () => {
    console.log('üìä [Reports] fetchReports: –ù–ê–ß–ê–õ–û');
    console.log('üìä [Reports] fetchReports: user =', user ? { id: user.id, email: user.email } : 'null');
    console.log('üìä [Reports] fetchReports: selectedFilter =', selectedFilter);
    
    if (!user) {
      console.log('üìä [Reports] fetchReports: –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –≤—ã—Ö–æ–¥–∏–º');
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      console.log('üìä [Reports] fetchReports: –°–æ–∑–¥–∞–µ–º Supabase –∑–∞–ø—Ä–æ—Å...');
      
      let query = supabase
        .from("reports")
        .select("*")
        .order("created_at", { ascending: false });
      
      console.log('üìä [Reports] fetchReports: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –ø–ª–∞–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
      if (selectedFilter !== "all") {
        const [min, max] = selectedFilter.split("-").map(Number);
        console.log('üìä [Reports] fetchReports: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä:', { min, max });
        query = query.gte("plan_number", min).lte("plan_number", max);
      }

      console.log('üìä [Reports] fetchReports: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase...');
      
      const { data, error } = await query;

      console.log('üìä [Reports] fetchReports: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
      console.log('üìä [Reports] fetchReports: data =', data);
      console.log('üìä [Reports] fetchReports: error =', error);

      if (error) {
        console.error("üìä [Reports] –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤:", error);
        console.error("üìä [Reports] –î–ï–¢–ê–õ–ò –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
        return;
      }

      if (data) {
        console.log('üìä [Reports] fetchReports: –£—Å–ø–µ—Ö! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤:', data.length);
        setReportsPosts(data as Post[]);
      } else {
        console.log('üìä [Reports] fetchReports: –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –Ω–µ—Ç');
        setReportsPosts([]);
      }
    } catch (error) {
      console.error("üìä [Reports] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤:", error);
      console.error("üìä [Reports] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
      console.log('üìä [Reports] fetchReports: –ó–ê–í–ï–†–®–ï–ù–ò–ï');
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchReports();
  };

  useEffect(() => {
    fetchReports();
  }, [user, selectedFilter]);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 0) {
      return "—Å–µ–≥–æ–¥–Ω—è";
    } else if (diffDays === 1) {
      return "–≤—á–µ—Ä–∞";
    } else if (diffDays <= 7) {
      return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString("ru-RU");
    }
  };

  const filterOptions = [
    { value: "all", label: "–í—Å–µ –ø–ª–∞–Ω—ã" },
    { value: "1-9", label: "1-9 (–§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω)" },
    { value: "10-18", label: "10-18 (–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω)" },
    { value: "19-27", label: "19-27 (–ù–µ–±–µ—Å–Ω—ã–π –ø–ª–∞–Ω)" },
    { value: "28-36", label: "28-36 (–ü–ª–∞–Ω –±–∞–ª–∞–Ω—Å–∞)" },
    { value: "37-45", label: "37-45 (–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–ª–∞–Ω)" },
    { value: "46-54", label: "46-54 (–ü–ª–∞–Ω –∞—Å–∫–µ—Ç–∏–∑–º–∞)" },
    { value: "55-63", label: "55-63 (–ü–ª–∞–Ω —Å–æ–∑–Ω–∞–Ω–∏—è)" },
    { value: "64-72", label: "64-72 (–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–ª–∞–Ω)" },
  ];

  // –ß–∞–∫—Ä—ã –∏ –∏—Ö —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const chakraFilters = [
    { id: "all", label: "–í—Å–µ –ø–ª–∞–Ω—ã", icon: "mandala", color: "#6A0DAD" },
    { id: "1-9", label: "–ú—É–ª–∞–¥—Ö–∞—Ä–∞ (1-9)", icon: "meditation", color: "#ef4444" },
    { id: "10-18", label: "–°–≤–∞–¥—Ö–∏—Å—Ç–∞–Ω–∞ (10-18)", icon: "water", color: "#f97316" },
    { id: "19-27", label: "–ú–∞–Ω–∏–ø—É—Ä–∞ (19-27)", icon: "white-balance-sunny", color: "#eab308" },
    { id: "28-36", label: "–ê–Ω–∞—Ö–∞—Ç–∞ (28-36)", icon: "heart-outline", color: "#22c55e" },
    { id: "37-45", label: "–í–∏—à—É–¥—Ö–∞ (37-45)", icon: "microphone", color: "#3b82f6" },
    { id: "46-54", label: "–ê–¥–∂–Ω–∞ (46-54)", icon: "eye-outline", color: "#6366f1" },
    { id: "55-63", label: "–°–∞—Ö–∞—Å—Ä–∞—Ä–∞ (55-63)", icon: "star-face", color: "#a855f7" },
    { id: "64-72", label: "–ù–∏—Ä–≤–∞–Ω–∞ (64-72)", icon: "shimmer", color: "#ec4899" },
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–ª–∞–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É
  const getPlanLevel = (planNumber: number) => {
    return Math.ceil(planNumber / 9);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–∞–Ω–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
  const getPlanRange = (planNumber: number) => {
    const level = getPlanLevel(planNumber);
    const min = (level - 1) * 9 + 1;
    const max = level * 9;
    return `${min}-${max}`;
  };

  return (
    <ImageBackground
      source={require("@/assets/icons/BG.png")}
      style={{ flex: 1, width: "100%" }}
      resizeMode="cover"
      className="flex-1"
    >
      <View className="flex-1 w-full">
        <Header title="–û—Ç—á–µ—Ç—ã –æ –ø–ª–∞–Ω–∞—Ö" onInfoPress={() => setIsRulesVisible(!isRulesVisible)} onBookPress={() => {}} />

        {/* –í–≤–µ–¥–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
        <View className={Platform.OS === 'web' ? 'mx-4 mt-4 p-4 rounded-lg shadow-sm' : 'bg-white bg-opacity-80 mx-4 mt-4 p-4 rounded-lg shadow-sm'}>
          <View className="flex-row items-center mb-2">
            <Icon name="book-open-variant" size={22} color="#6A0DAD" className="mr-2" />
            <Text className="text-lg font-bold text-purple-900">–î–Ω–µ–≤–Ω–∏–∫ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏</Text>
          </View>
          
          <Text className="text-gray-700 text-sm mb-3">
            –í –∏–≥—Ä–µ –õ–∏–ª–∞ (72 –ø–æ–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è) –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–º—ã—à–ª—è—Ç—å –æ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –ø–æ–ø–∞–ª, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. –¢–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –ø—É—Ç–∏.
          </Text>
          
          {isRulesVisible && (
            <View className="bg-purple-50 p-3 rounded-lg mb-3 border-l-4 border-purple-400">
              <Text className="text-sm text-gray-700 italic mb-2">
                "–ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–µ–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞."
              </Text>
              <Text className="text-xs text-gray-500">‚Äî –∏–∑ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã –õ–∏–ª–∞</Text>
              
              <View className="mt-3 flex-row">
                <View className="flex-1 border-r border-gray-300 pr-2">
                  <Text className="text-xs font-bold text-purple-900 mb-1">–¶–µ–ª—å –æ—Ç—á–µ—Ç–æ–≤:</Text>
                  <Text className="text-xs text-gray-700">
                    ‚Ä¢ –û—Å–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
                    ‚Ä¢ –ó–∞–∫—Ä–µ–ø–∏—Ç—å –¥—É—Ö–æ–≤–Ω—ã–π –æ–ø—ã—Ç
                    ‚Ä¢ –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å
                  </Text>
                </View>
                <View className="flex-1 pl-2">
                  <Text className="text-xs font-bold text-purple-900 mb-1">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</Text>
                  <Text className="text-xs text-gray-700">
                    ‚Ä¢ –ë—É–¥—å—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏
                    ‚Ä¢ –û—Ç—Ä–∞–∑–∏—Ç–µ —Å–≤—è–∑—å —Å –≤–∞—à–µ–π –∂–∏–∑–Ω—å—é
                    ‚Ä¢ –ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ö–æ–¥–∞
                  </Text>
                </View>
              </View>
            </View>
          )}
          
          <View className="flex-row items-center flex-wrap">
            <TouchableOpacity 
              className="flex-row items-center bg-purple-100 py-1.5 px-3 rounded-full mr-2 mb-2"
              onPress={() => setIsRulesVisible(!isRulesVisible)}
            >
              <Icon name={isRulesVisible ? "chevron-up" : "chevron-down"} size={16} color="#6A0DAD" />
              <Text className="text-xs text-purple-900 ml-1">{isRulesVisible ? "–°–∫—Ä—ã—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏—è" : "–ü–æ—è—Å–Ω–µ–Ω–∏—è"}</Text>
            </TouchableOpacity>
            
            <ScrollView 
              horizontal 
              showsHorizontalScrollIndicator={false}
              className="flex-row"
            >
              {filterOptions.map((option) => (
                <TouchableOpacity 
                  key={option.value}
                  className={`flex-row items-center py-1.5 px-3 rounded-full mr-2 ${selectedFilter === option.value ? 'bg-purple-600' : 'bg-purple-100'}`}
                  onPress={() => setSelectedFilter(option.value)}
                >
                  <Text className={`text-xs ${selectedFilter === option.value ? 'text-white' : 'text-purple-900'}`}>{option.label}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ */}
        {!gameStateLoading && currentPlayer && currentPlayer.plan > 0 && (
          <View className="bg-white bg-opacity-80 mx-4 mt-3 p-4 rounded-lg shadow-sm">
            <View className="flex-row items-center">
              <View 
                className="w-10 h-10 rounded-full items-center justify-center mr-3"
                style={{ backgroundColor: chakraFilters[getPlanLevel(currentPlayer.plan)].color + '20' }}
              >
                <Text className="font-bold" style={{ color: chakraFilters[getPlanLevel(currentPlayer.plan)].color }}>
                  {currentPlayer.plan}
                </Text>
              </View>
              <View>
                <Text className="text-sm font-bold text-gray-800">–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</Text>
                <Text className="text-xs text-gray-600">{chakraFilters[getPlanLevel(currentPlayer.plan)].label.split(' ')[0]}</Text>
                <Text className="text-xs text-purple-600 mt-1">üí¨ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ —á–∞—Ç –≤ –∏–≥—Ä–µ</Text>
              </View>
            </View>
          </View>
        )}

        {/* –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 8 —É—Ä–æ–≤–Ω–µ–π */}
        <View className="flex-row justify-center items-center mx-4 my-3">
          {[1, 2, 3, 4, 5, 6, 7, 8].map((level) => (
            <View 
              key={level} 
              className={`h-2 flex-1 mx-0.5 rounded-full ${
                (level === 1 && (selectedFilter === "1-9" || selectedFilter === "all")) ? "bg-red-500" : 
                (level === 2 && (selectedFilter === "10-18" || selectedFilter === "all")) ? "bg-orange-500" : 
                (level === 3 && (selectedFilter === "19-27" || selectedFilter === "all")) ? "bg-yellow-500" : 
                (level === 4 && (selectedFilter === "28-36" || selectedFilter === "all")) ? "bg-green-500" : 
                (level === 5 && (selectedFilter === "37-45" || selectedFilter === "all")) ? "bg-blue-500" : 
                (level === 6 && (selectedFilter === "46-54" || selectedFilter === "all")) ? "bg-indigo-500" : 
                (level === 7 && (selectedFilter === "55-63" || selectedFilter === "all")) ? "bg-purple-500" : 
                (level === 8 && (selectedFilter === "64-72" || selectedFilter === "all")) ? "bg-pink-500" : 
                "bg-gray-300"
              }`}
            />
          ))}
        </View>

        <ScrollView 
          className="flex-1 px-4"
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
        >
          {isLoading && reportsPosts.length === 0 ? (
            <View className="items-center justify-center py-10">
              <ActivityIndicator size="large" color="#6A0DAD" />
              <Text className="text-purple-900 mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...</Text>
            </View>
          ) : reportsPosts.length === 0 ? (
            <View className="items-center justify-center py-10">
              <Icon name="playlist-remove" size={60} color="#6A0DAD" style={{opacity: 0.5}} />
              <Text className="text-gray-500 mt-4 text-center">
                –û—Ç—á–µ—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–∞–º –ø–æ–∫–∞ –Ω–µ—Ç{'\n'}
                –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –æ–ø—ã—Ç–æ–º!
              </Text>
            </View>
          ) : (
            reportsPosts.map((post) => (
              <ReportPost
                key={post.id}
                number={post.plan_number.toString().padStart(2, '0')}
                content={post.content}
                date={formatDate(post.created_at)}
                likes={post.likes}
                comments={post.comments}
                planLevel={Math.ceil(post.plan_number / 9)}
              />
            ))
          )}

          {/* –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç (–ø–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞) */}
          <View className="h-20" />
        </ScrollView>
      </View>
    </ImageBackground>
  );
}
