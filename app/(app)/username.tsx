import { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from "react-native";
import { useSupabase } from "@/context/supabase-provider";
import { Stack } from "expo-router";

export default function Username() {
  const { updateUserData } = useSupabase();
  const [username, setUsername] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const validateUsername = (value: string) => {
    if (!value) return "–í–≤–µ–¥–∏—Ç–µ username";
    if (value.length < 3) return "Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤";
    if (value.length > 20) return "Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤";
    if (!/^[a-zA-Z0-9_]+$/.test(value)) return "Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _";
    return null;
  };

  const onSubmit = async () => {
    try {
      setError(null);
      setIsLoading(true);

      const validationError = validateUsername(username);
      if (validationError) {
        setError(validationError);
        return;
      }

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É username:', username);
      await updateUserData({ username });
      console.log('‚úÖ Username —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', username);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ username:', error);
      setError(error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ username");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Stack.Screen options={{ headerShown: false }} />
      
      <Text style={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ Username</Text>
      <Text style={styles.description}>
        –í—ã–±–µ—Ä–∏—Ç–µ username –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.
      </Text>

      {error && (
        <View style={styles.errorContainer}>
          <Text style={styles.errorIcon}>‚ùå</Text>
          <Text style={styles.errorText}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</Text>
          <Text style={styles.errorDescription}>{error}</Text>
        </View>
      )}

      <TextInput
        style={styles.input}
        placeholder="–í–≤–µ–¥–∏—Ç–µ username"
        value={username}
        onChangeText={(text) => {
          setUsername(text);
          setError(null);
        }}
        autoCapitalize="none"
        autoCorrect={false}
        editable={!isLoading}
      />

      <TouchableOpacity
        style={[styles.button, isLoading && styles.buttonDisabled]}
        onPress={onSubmit}
        disabled={isLoading}
      >
        <Text style={styles.buttonText}>
          {isLoading ? "–ü—Ä–æ–≤–µ—Ä—è–µ–º..." : "–ü–†–û–î–û–õ–ñ–ò–¢–¨"}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#fff",
    justifyContent: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 10,
  },
  description: {
    fontSize: 16,
    textAlign: "center",
    color: "#666",
    marginBottom: 30,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 15,
    fontSize: 16,
    marginBottom: 20,
  },
  button: {
    backgroundColor: "#000",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
  },
  buttonDisabled: {
    backgroundColor: "#ccc",
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  errorContainer: {
    backgroundColor: "#FEE2E2",
    padding: 16,
    borderRadius: 8,
    marginBottom: 20,
  },
  errorIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  errorText: {
    color: "#DC2626",
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 4,
  },
  errorDescription: {
    color: "#DC2626",
    fontSize: 14,
  },
});
