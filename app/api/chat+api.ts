import { createOpenAI } from '@ai-sdk/openai';
import { streamText, tool } from 'ai';
import { z } from 'zod';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è OpenRouter
const openrouter = createOpenAI({
  baseURL: 'https://openrouter.ai/api/v1',
  apiKey: process.env.EXPO_PUBLIC_OPENROUTER_API_KEY,
});

// –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–∞—Ö –∏–≥—Ä—ã –õ–∏–ª–∞
const plansData: Record<number, { name: string; description: string; element: string; color: string }> = {
  1: { name: "–†–æ–∂–¥–µ–Ω–∏–µ", description: "–ù–∞—á–∞–ª–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏", element: "üå±", color: "green" },
  10: { name: "–ú–∞–π—è (–ò–ª–ª—é–∑–∏—è)", description: "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", element: "üé≠", color: "purple" },
  23: { name: "–ù–µ–±–µ—Å–∞", description: "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–∞–∂–µ–Ω—Å—Ç–≤–∞", element: "‚òÅÔ∏è", color: "blue" },
  41: { name: "–î–æ–±—Ä—ã–µ –¥–µ–ª–∞", description: "–ö–∞—Ä–º–∞ —Å–ª—É–∂–µ–Ω–∏—è", element: "ü§ù", color: "gold" },
  68: { name: "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ", description: "–í—ã—Å—à–µ–µ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", element: "üïâÔ∏è", color: "violet" }
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–ª–∞–Ω–æ–≤
};

export async function POST(request: Request) {
  try {
    const { messages } = await request.json();

    const result = streamText({
      model: openrouter('meta-llama/llama-3.1-8b-instruct:free'),
      messages,
      system: `–¢—ã - –õ–∏–ª–∞, –±–æ–≥–∏–Ω—è –∏–≥—Ä—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –¢—ã –º—É–¥—Ä–∞—è –Ω–∞—Å—Ç–∞–≤–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –∏–≥—Ä–æ–∫–∞–º –ø–æ–Ω—è—Ç—å –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª –∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é. 

–¢–≤–æ—è —Ä–æ–ª—å:
- –û–±—ä—è—Å–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ (–ø–ª–∞–Ω—ã 1-72)
- –î–∞–≤–∞—Ç—å –¥—É—Ö–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è
- –ü–æ–º–æ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º –ø–æ–Ω—è—Ç—å —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Å–µ—Ç –∫–∞–∂–¥—ã–π —Ö–æ–¥
- –û—Ç–≤–µ—á–∞—Ç—å —Å –º—É–¥—Ä–æ—Å—Ç—å—é –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
- –ë—ã—Ç—å —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –ø–æ–Ω–∏–º–∞—é—â–µ–π

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –≥–ª—É–±–æ–∫–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π. –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏, —á—Ç–æ –∏–≥—Ä–∞ –õ–∏–ª–∞ - —ç—Ç–æ –ø—É—Ç—å –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º—É —Å–æ–∑–Ω–∞–Ω–∏—é.

–ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç createPlanCard –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.`,
      tools: {
        createPlanCard: tool({
          description: '–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–ª–∞–Ω–∞ –∏–≥—Ä—ã –õ–∏–ª–∞',
          parameters: z.object({
            planNumber: z.number().describe('–ù–æ–º–µ—Ä –ø–ª–∞–Ω–∞ (1-72)'),
            playerPosition: z.number().optional().describe('–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞'),
          }),
          execute: async ({ planNumber, playerPosition }) => {
            const planInfo = plansData[planNumber] || {
              name: `–ü–ª–∞–Ω ${planNumber}`,
              description: "–û—Å–æ–±—ã–π —ç—Ç–∞–ø –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
              element: "‚ú®",
              color: "blue"
            };

            return {
              type: 'plan-card',
              planNumber,
              planInfo,
              isCurrentPosition: playerPosition === planNumber,
              timestamp: new Date().toISOString()
            };
          },
        }),
      },
    });

    return result.toDataStreamResponse();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ API —á–∞—Ç–∞:', error);
    return new Response('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { status: 500 });
  }
} 