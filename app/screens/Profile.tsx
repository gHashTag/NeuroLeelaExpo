import React, { useEffect, useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, ActivityIndicator } from 'react-native';
import { supabase } from '../../lib/supabase';
import Toast from 'react-native-toast-message';

interface Profile {
  id: string;
  username: string;
  updated_at: string;
}

export default function Profile() {
  const [loading, setLoading] = useState(true);
  const [username, setUsername] = useState('');
  const [profile, setProfile] = useState<Profile | null>(null);

  useEffect(() => {
    getProfile();
  }, []);

  async function getProfile() {
    try {
      setLoading(true);
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...');

      const { data: { user } } = await supabase.auth.getUser();

      if (!user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          position: 'bottom',
        });
        return;
      }

      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: error.message,
          position: 'bottom',
        });
        return;
      }

      if (data) {
        setProfile(data);
        setUsername(data.username);
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', data);
      }
    } catch (error) {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      Toast.show({
        type: 'error',
        text1: '–û—à–∏–±–∫–∞',
        text2: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
        position: 'bottom',
      });
    } finally {
      setLoading(false);
    }
  }

  async function updateProfile() {
    try {
      setLoading(true);
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');

      const { data: { user } } = await supabase.auth.getUser();

      if (!user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          position: 'bottom',
        });
        return;
      }

      const { error } = await supabase
        .from('profiles')
        .upsert({
          id: user.id,
          username,
          updated_at: new Date().toISOString(),
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        Toast.show({
          type: 'error',
          text1: '–û—à–∏–±–∫–∞',
          text2: error.message,
          position: 'bottom',
        });
        return;
      }

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      Toast.show({
        type: 'success',
        text1: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
        position: 'bottom',
      });
    } catch (error) {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      Toast.show({
        type: 'error',
        text1: '–û—à–∏–±–∫–∞',
        text2: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
        position: 'bottom',
      });
    } finally {
      setLoading(false);
    }
  }

  return (
    <View className="flex-1 items-center justify-center p-4 bg-white">
      <View className="w-full max-w-sm space-y-4">
        <Text className="text-2xl font-bold text-center mb-8">
          –ü—Ä–æ—Ñ–∏–ª—å
        </Text>

        <TextInput
          className="w-full h-12 px-4 border border-gray-300 rounded-lg"
          placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          value={username}
          onChangeText={setUsername}
          autoCapitalize="none"
        />

        <TouchableOpacity
          className={`w-full h-12 rounded-lg flex items-center justify-center ${
            loading ? 'bg-gray-400' : 'bg-blue-500'
          }`}
          onPress={updateProfile}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator color="white" />
          ) : (
            <Text className="text-white font-semibold">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Text>
          )}
        </TouchableOpacity>
      </View>
    </View>
  );
} 