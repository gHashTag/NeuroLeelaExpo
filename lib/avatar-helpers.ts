import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';
import { Platform } from 'react-native';

/**
 * Error types for the avatar upload process
 */
export enum AvatarUploadErrorType {
  CANCELED = 'CANCELED',
  AUTH_ERROR = 'AUTH_ERROR',
  UPLOAD_ERROR = 'UPLOAD_ERROR',
  PROCESSING_ERROR = 'PROCESSING_ERROR',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

/**
 * Type for the avatar upload options
 */
export interface AvatarUploadOptions {
  /** Maximum width of the avatar image after resizing (default: 800 for web, 400 for native) */
  maxWidth?: number;
  /** Image quality (0-1) after compression (default: 0.8) */
  quality?: number;
  /** Whether to allow editing the image before upload (default: true) */
  allowsEditing?: boolean;
}

/**
 * Interface for Supabase functions required for avatar upload
 */
export interface SupabaseFunctions {
  uploadAvatar: (uri: string) => Promise<string>;
  updateUserData: (data: any) => Promise<void>;
  getAvatarUrl: (ipfsHash: string) => string | null;
}

/**
 * Pick, process, and upload an avatar image
 * 
 * @param supabaseFunctions - Required Supabase functions for uploading and processing avatar
 * @param onSuccess - Callback called with avatar URL on success
 * @param onError - Callback called with error on failure
 * @param options - Options for the avatar upload process
 * @returns Promise with the avatar URL or void if canceled
 */
export const pickImage = async (
  supabaseFunctions: SupabaseFunctions,
  onSuccess?: (avatarUrl: string) => void, 
  onError?: (error: Error) => void,
  options?: AvatarUploadOptions
): Promise<string | void> => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ö—É–∫–∞
    const { uploadAvatar, updateUserData, getAvatarUrl } = supabaseFunctions;
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–æ–¥—ã Supabase:', { 
      uploadAvatarExists: !!uploadAvatar, 
      updateUserDataExists: !!updateUserData,
      getAvatarUrlExists: !!getAvatarUrl 
    });
    
    // Set default options
    const {
      maxWidth = Platform.OS === 'web' ? 800 : 400,
      quality = 0.8,
      allowsEditing = true
    } = options || {};
    
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:', { maxWidth, quality, allowsEditing, platform: Platform.OS });
    
    // Launch the image picker
    console.log('üì∑ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing,
      aspect: [1, 1],
      quality,
    });
    console.log('üì∑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', { 
      canceled: result.canceled,
      assetsCount: result.assets?.length || 0
    });

    // Handle cancellation
    if (result.canceled) {
      console.log('‚ùå –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      return;
    }

    const imageUri = result.assets[0].uri;
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ:', imageUri.substring(0, 100) + (imageUri.length > 100 ? '...' : ''));

    // Process the image
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    const processedImage = await ImageManipulator.manipulateAsync(
      imageUri,
      [{ resize: { width: maxWidth } }],
      { compress: quality, format: ImageManipulator.SaveFormat.JPEG }
    );
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', { 
      uri: processedImage.uri.substring(0, 100) + (processedImage.uri.length > 100 ? '...' : ''),
      width: processedImage.width,
      height: processedImage.height
    });

    // Upload to IPFS
    console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ IPFS...');
    const ipfsHash = await uploadAvatar(processedImage.uri);
    console.log('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS:', { ipfsHash });
    
    if (!ipfsHash) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IPFS —Ö–µ—à –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
      const error = new Error('Failed to upload image. Please check your connection and try again.');
      error.name = AvatarUploadErrorType.UPLOAD_ERROR;
      throw error;
    }
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ IPFS:', ipfsHash);

    // Get the avatar URL
    console.log('üîó –ü–æ–ª—É—á–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞...');
    const avatarUrl = getAvatarUrl(ipfsHash);
    console.log('üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è URL:', { avatarUrl });
    
    if (!avatarUrl) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∞');
      const error = new Error('Failed to generate avatar URL');
      error.name = AvatarUploadErrorType.PROCESSING_ERROR;
      throw error;
    }

    // Update user data
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userData = {
      pinata_avatar_id: ipfsHash,
      avatar_url: avatarUrl,
      updated_at: new Date().toISOString(),
    };
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', userData);
    
    try {
      await updateUserData(userData);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
      console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    // Call success callback
    if (onSuccess) {
      console.log('üéâ –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      onSuccess(avatarUrl);
    }
    
    return avatarUrl;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    
    // Enhance error with type information if possible
    let enhancedError: Error;
    
    if (error instanceof Error) {
      console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É:', { 
        message: error.message,
        name: error.name,
        stack: error.stack?.substring(0, 200)
      });
      
      if (error.message.includes('401') || error.message.includes('auth')) {
        error.name = AvatarUploadErrorType.AUTH_ERROR;
      } else if (!error.name || error.name === 'Error') {
        error.name = AvatarUploadErrorType.UNKNOWN_ERROR;
      }
      enhancedError = error;
    } else {
      console.log('üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      enhancedError = new Error(
        typeof error === 'string' ? error : 'An unknown error occurred during avatar upload'
      );
      enhancedError.name = AvatarUploadErrorType.UNKNOWN_ERROR;
    }
    
    // Call error callback
    if (onError) {
      console.log('üìõ –í—ã–∑—ã–≤–∞–µ–º callback –æ—à–∏–±–∫–∏');
      onError(enhancedError);
    }
    
    throw enhancedError;
  }
}; 