import 'react-native-url-polyfill/auto';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import { AppState, Platform } from 'react-native';
import NetInfo from '@react-native-community/netinfo';

console.log("DEBUG: Attempting to read Supabase ENV vars");
console.log("DEBUG: Raw EXPO_PUBLIC_SUPABASE_URL:", process.env.EXPO_PUBLIC_SUPABASE_URL);
console.log("DEBUG: Raw EXPO_PUBLIC_SUPABASE_ANON_KEY:", process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY);

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase:', {
    url: supabaseUrl ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    key: supabaseKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  });
  throw new Error('Missing Supabase environment variables');
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
let isNetworkConnected = true;
let isInternetReachable = true;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
NetInfo.addEventListener((state) => {
  isNetworkConnected = state.isConnected ?? false;
  isInternetReachable = state.isInternetReachable ?? false;
  
  console.log('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏:', {
    type: state.type,
    isConnected: isNetworkConnected,
    isInternetReachable: isInternetReachable
  });

  if (!isNetworkConnected || !isInternetReachable) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ç–∏');
  }
});

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: Platform.OS === 'web'
  },
  global: {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      ...(Platform.OS === 'web' ? {
        'Access-Control-Allow-Origin': '*',
      } : {}),
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 2,
    },
  },
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
supabase.auth.onAuthStateChange((event, session) => {
  console.log('üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', event);
  if (session) {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', {
      id: session.user.id,
      email: session.user.email
    });
  } else {
    console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
AppState.addEventListener('change', (state) => {
  if (state === 'active') {
    if (isNetworkConnected && isInternetReachable) {
      supabase.auth.startAutoRefresh();
      console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–æ');
    } else {
      console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é');
    }
  } else {
    supabase.auth.stopAutoRefresh();
    console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
}); 