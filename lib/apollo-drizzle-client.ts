import { ApolloClient, InMemoryCache, makeVar } from '@apollo/client';
import { Player } from '@/db/schema';
import { supabase } from '@/config/supabase';
// import { neonAdapter } from './neon-adapter';

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const currentPlayerVar = makeVar<Player | null>(null);
export const isLoadingVar = makeVar<boolean>(true);
export const errorVar = makeVar<string | null>(null);

// –ö–ª—é—á –¥–ª—è localStorage
const PLAYER_STORAGE_KEY = 'neuroleela_player_data';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ localStorage
const savePlayerToStorage = (playerData: Player) => {
  try {
    if (typeof window !== 'undefined') {
      localStorage.setItem(PLAYER_STORAGE_KEY, JSON.stringify(playerData));
      console.log('[Apollo] –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }
  } catch (error) {
    console.error('[Apollo] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ localStorage
const loadPlayerFromStorage = (userId: string): Player | null => {
  try {
    console.log('[Apollo] loadPlayerFromStorage: –ù–ê–ß–ê–õ–û –¥–ª—è userId:', userId);
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(PLAYER_STORAGE_KEY);
      console.log('[Apollo] loadPlayerFromStorage: –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', stored);
      if (stored) {
        const playerData = JSON.parse(stored);
        console.log('[Apollo] loadPlayerFromStorage: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', playerData);
        console.log('[Apollo] loadPlayerFromStorage: playerData.id:', playerData.id, 'userId:', userId);
        if (playerData.id === userId) {
          console.log('[Apollo] –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', playerData);
          return playerData;
        } else {
          console.log('[Apollo] loadPlayerFromStorage: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
        }
      } else {
        console.log('[Apollo] loadPlayerFromStorage: localStorage –ø—É—Å—Ç');
      }
    } else {
      console.log('[Apollo] loadPlayerFromStorage: window –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    }
  } catch (error) {
    console.error('[Apollo] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ localStorage:', error);
  }
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ Supabase
export const loadPlayerData = async (userId: string) => {
  try {
    console.log('[Apollo] loadPlayerData: –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò –¥–ª—è userId:', userId);
    isLoadingVar(true);
    errorVar(null);
    
    console.log('[Apollo] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –¥–ª—è userId:', userId);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
    const storedPlayer = loadPlayerFromStorage(userId);
    if (storedPlayer) {
      console.log('[Apollo] loadPlayerData: –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage:', storedPlayer);
      currentPlayerVar(storedPlayer);
      console.log('[Apollo] –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
      isLoadingVar(false); // –î–æ–±–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      return;
    } else {
      console.log('[Apollo] loadPlayerData: –î–∞–Ω–Ω—ã–µ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage');
    }
    
    // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
    try {
      const { data: playerData, error } = await supabase
        .from('players')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
        throw error;
      }
      
      let finalPlayerData;
      
      if (!playerData) {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        console.log('[Apollo] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        
        finalPlayerData = {
          id: userId,
          plan: 68, // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–±–µ–¥—ã (68)
          previous_plan: 0,
          message: '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è',
          avatar: null,
          fullName: null,
          intention: null,
          isStart: false,
          isFinished: true, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ true, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É "–Ω—É–∂–Ω–∞ 6 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞"
          consecutiveSixes: 0,
          positionBeforeThreeSixes: 0,
          needsReport: false // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç—á–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ Supabase
        try {
          const { data: createdPlayer, error: createError } = await supabase
            .from('players')
            .insert([finalPlayerData])
            .select()
            .single();
          
          if (!createError && createdPlayer) {
            finalPlayerData = createdPlayer;
            console.log('[Apollo] –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –≤ Supabase:', createdPlayer);
          }
        } catch (createError) {
          console.log('[Apollo] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      } else {
        finalPlayerData = playerData;
        console.log('[Apollo] –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase:', playerData);
      }
      
      currentPlayerVar(finalPlayerData as Player);
      savePlayerToStorage(finalPlayerData as Player);
      
    } catch (supabaseError) {
      console.log('[Apollo] Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const initialPlayerData = {
        id: userId,
        plan: 68,
        previous_plan: 0,
        message: '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è',
        avatar: null,
        fullName: null,
        intention: null,
        isStart: false,
        isFinished: true,
        consecutiveSixes: 0,
        positionBeforeThreeSixes: 0,
        needsReport: false // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç—á–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω
      };
      
      currentPlayerVar(initialPlayerData as Player);
      savePlayerToStorage(initialPlayerData as Player);
    }
    
  } catch (error) {
    console.error('[Apollo] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
    errorVar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞');
  } finally {
    isLoadingVar(false);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
export const updatePlayerInStorage = (updatedPlayer: Player) => {
  console.log('[Apollo] updatePlayerInStorage –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', updatedPlayer);
  currentPlayerVar(updatedPlayer);
  savePlayerToStorage(updatedPlayer);
  console.log('[Apollo] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Apollo –∏ localStorage');
};

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
export const updatePlayerState = (updates: Partial<Player>) => {
  console.log('üî• [Apollo] updatePlayerState: === –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò ===');
  console.log('üî• [Apollo] updatePlayerState: –≤—Ö–æ–¥—è—â–∏–µ updates =', updates);
  
  const currentPlayer = currentPlayerVar();
  console.log('üî• [Apollo] updatePlayerState: currentPlayer –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è =', currentPlayer);
  
  if (!currentPlayer) {
    console.error('üî• [Apollo] updatePlayerState: –û–®–ò–ë–ö–ê - –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  const updatedPlayer = {
    ...currentPlayer,
    ...updates
  };
  
  console.log('üî• [Apollo] updatePlayerState: updatedPlayer (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è) =', updatedPlayer);
  console.log('üî• [Apollo] updatePlayerState: –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:');
  console.log('üî• [Apollo] updatePlayerState: plan:', currentPlayer.plan, '->', updatedPlayer.plan);
  console.log('üî• [Apollo] updatePlayerState: previous_plan:', currentPlayer.previous_plan, '->', updatedPlayer.previous_plan);
  console.log('üî• [Apollo] updatePlayerState: isFinished:', currentPlayer.isFinished, '->', updatedPlayer.isFinished);
  console.log('üî• [Apollo] updatePlayerState: needsReport:', currentPlayer.needsReport, '->', updatedPlayer.needsReport);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  console.log('üî• [Apollo] updatePlayerState: –í–´–ó–´–í–ê–ï–ú currentPlayerVar(updatedPlayer)...');
  currentPlayerVar(updatedPlayer);
  console.log('üî• [Apollo] updatePlayerState: currentPlayerVar –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  console.log('üî• [Apollo] updatePlayerState: –°–û–•–†–ê–ù–Ø–ï–ú –≤ localStorage...');
  savePlayerToStorage(updatedPlayer);
  console.log('üî• [Apollo] updatePlayerState: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
  const verifyPlayer = currentPlayerVar();
  console.log('üî• [Apollo] updatePlayerState: –ü–†–û–í–ï–†–ö–ê - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ currentPlayerVar() =', verifyPlayer);
  console.log('üî• [Apollo] updatePlayerState: –ü–†–û–í–ï–†–ö–ê - –ø–ª–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è?', verifyPlayer?.plan === updatedPlayer.plan ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
  console.log('üî• [Apollo] updatePlayerState: === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò ===');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
export const markReportCompleted = async (userId: string) => {
  try {
    console.log('üí´ [Apollo] markReportCompleted: === –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò ===');
    console.log('üí´ [Apollo] markReportCompleted: userId =', userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const playerBefore = currentPlayerVar();
    console.log('üí´ [Apollo] markReportCompleted: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è =', playerBefore);
    console.log('üí´ [Apollo] markReportCompleted: needsReport –î–û =', playerBefore?.needsReport);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
    console.log('üí´ [Apollo] markReportCompleted: –í–´–ó–´–í–ê–ï–ú updatePlayerState({ needsReport: false })...');
    updatePlayerState({ needsReport: false });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const playerAfter = currentPlayerVar();
    console.log('üí´ [Apollo] markReportCompleted: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è =', playerAfter);
    console.log('üí´ [Apollo] markReportCompleted: needsReport –ü–û–°–õ–ï =', playerAfter?.needsReport);
    console.log('üí´ [Apollo] markReportCompleted: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ?', playerAfter?.needsReport === false ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    
    console.log('üí´ [Apollo] markReportCompleted: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: needsReport = false');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ Supabase —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      console.log('üí´ [Apollo] markReportCompleted: –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Supabase...');
      const supabaseUpdatePromise = supabase
        .from('players')
        .update({ needsReport: false })
        .eq('id', userId);
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Supabase timeout')), 2000);
      });
      
      await Promise.race([supabaseUpdatePromise, timeoutPromise]);
      console.log('üí´ [Apollo] markReportCompleted: needsReport —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –≤ Supabase');
      
    } catch (supabaseError) {
      console.log('üí´ [Apollo] markReportCompleted: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      console.log('üí´ [Apollo] markReportCompleted: –û—à–∏–±–∫–∞ Supabase:', supabaseError);
    }
    
    console.log('üí´ [Apollo] markReportCompleted: === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò ===');
    
  } catch (error) {
    console.error('üí´ [Apollo] markReportCompleted: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
export const updatePlayerPosition = async (userId: string, newPosition: number) => {
  try {
    isLoadingVar(true);
    errorVar(null);
    
    const currentPlayer = currentPlayerVar();
    if (!currentPlayer) {
      throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const oldPosition = currentPlayer.plan;
    
    // –í–†–ï–ú–ï–ù–ù–û: –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ Neon
    console.log(`[Apollo] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ —Å ${oldPosition} –Ω–∞ ${newPosition} –¥–ª—è userId:`, userId);
    
    // –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ–ª–∞–≥ isFinished –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    // —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∞ –∑–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    currentPlayerVar({
      ...currentPlayer,
      plan: newPosition,
      previous_plan: oldPosition,
    });
    
    console.log('[Apollo] –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', currentPlayerVar());
  } catch (error) {
    console.error('[Apollo] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
    errorVar('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞');
  } finally {
    isLoadingVar(false);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
export const resetPlayerFromStuckPosition = () => {
  const currentPlayer = currentPlayerVar();
  if (!currentPlayer) {
    console.error('[Apollo] resetPlayerFromStuckPosition: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  console.log('[Apollo] resetPlayerFromStuckPosition: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–∏', currentPlayer.plan);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä—ã
  const resetPlayer = {
    ...currentPlayer,
    plan: 68, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    previous_plan: currentPlayer.plan,
    isFinished: true, // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å 6 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    consecutiveSixes: 0,
    positionBeforeThreeSixes: 0,
    needsReport: false,
    message: '–ò–≥—Ä–æ–∫ —Å–±—Ä–æ—à–µ–Ω. –ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!'
  };
  
  currentPlayerVar(resetPlayer);
  savePlayerToStorage(resetPlayer);
  console.log('[Apollo] –ò–≥—Ä–æ–∫ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é:', resetPlayer);
};

// –°–æ–∑–¥–∞–µ–º Apollo –∫–ª–∏–µ–Ω—Ç
export const apolloClient = new ApolloClient({
  cache: new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          currentPlayer: {
            read() {
              return currentPlayerVar();
            }
          },
          isLoading: {
            read() {
              return isLoadingVar();
            }
          },
          error: {
            read() {
              return errorVar();
            }
          }
        }
      }
    }
  }),
  // –ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  uri: 'http://localhost:4000' // –≠—Ç–æ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
}); 