import { useState, useEffect, useCallback } from 'react';
import { InngestEventService } from '@/services/InngestEventService';
import { useApolloDrizzle } from '@/hooks/useApolloDrizzle';
import { useSupabase } from '@/context/supabase-provider';

export interface ChatCommand {
  command: string;
  description: string;
  handler: (args: string[]) => Promise<ChatCommandResult>;
  allowedStates?: ('needsReport' | 'canRoll' | 'gameFinished' | 'waitingToStart')[];
}

export interface ChatCommandResult {
  success: boolean;
  message: string;
  data?: any;
  nextAction?: 'waitForReport' | 'enableDice' | 'showPlan' | 'gameComplete';
}

export interface ChatGameUpdate {
  type: 'diceResult' | 'reportSubmitted' | 'playerStateChanged' | 'gameComplete';
  data: any;
  timestamp: number;
}

export const useInngestChat = () => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<ChatGameUpdate | null>(null);
  const [gameUpdates, setGameUpdates] = useState<ChatGameUpdate[]>([]);
  
  const { currentPlayer, updatePlayerState } = useApolloDrizzle();
  const { user } = useSupabase();

  // üé≤ –ö–æ–º–∞–Ω–¥–∞: –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
  const rollDiceCommand = useCallback(async (args: string[]): Promise<ChatCommandResult> => {
    if (!user?.id) {
      return { success: false, message: '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞' };
    }

    if (currentPlayer?.needsReport) {
      return { 
        success: false, 
        message: `üìù –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç –æ –ø–ª–∞–Ω–µ ${currentPlayer.plan}` 
      };
    }

    try {
      setIsProcessing(true);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
      const roll = Math.floor(Math.random() * 6) + 1;
      
      console.log(`[useInngestChat] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: ${roll}`);
      
      const result = await InngestEventService.sendDiceRoll(user.id, roll);
      
      if (!result.success) {
        return { 
          success: false, 
          message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞: ${result.error}` 
        };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const gameUpdate: ChatGameUpdate = {
        type: 'diceResult',
        data: { roll, userId: user.id, eventId: result.eventId },
        timestamp: Date.now()
      };
      
      setLastUpdate(gameUpdate);
      setGameUpdates(prev => [...prev, gameUpdate]);

      return {
        success: true,
        message: `üé≤ –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω! –í—ã–ø–∞–ª–æ: **${roll}**\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`,
        data: { roll },
        nextAction: 'waitForReport'
      };
      
    } catch (error) {
      console.error('[useInngestChat] –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
      return { 
        success: false, 
        message: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      };
    } finally {
      setIsProcessing(false);
    }
  }, [user?.id, currentPlayer?.needsReport, currentPlayer?.plan]);

  // üìù –ö–æ–º–∞–Ω–¥–∞: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç
  const submitReportCommand = useCallback(async (args: string[]): Promise<ChatCommandResult> => {
    if (!user?.id) {
      return { success: false, message: '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞' };
    }

    if (!currentPlayer?.needsReport) {
      return { 
        success: false, 
        message: 'üìù –û—Ç—á–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ú–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞.' 
      };
    }

    const reportText = args.join(' ');
    if (reportText.length < 10) {
      return { 
        success: false, 
        message: 'üìù –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –¥—É—Ö–æ–≤–Ω—ã–π –æ–ø—ã—Ç –Ω–∞ —ç—Ç–æ–º –ø–ª–∞–Ω–µ.' 
      };
    }

    try {
      setIsProcessing(true);
      
      console.log(`[useInngestChat] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –ø–ª–∞–Ω–∞ ${currentPlayer.plan}`);
      
      const result = await InngestEventService.sendPlayerReport(
        user.id, 
        reportText, 
        currentPlayer.plan
      );
      
      if (!result.success) {
        return { 
          success: false, 
          message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: ${result.error}` 
        };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const gameUpdate: ChatGameUpdate = {
        type: 'reportSubmitted',
        data: { 
          report: reportText, 
          planNumber: currentPlayer.plan, 
          eventId: result.eventId 
        },
        timestamp: Date.now()
      };
      
      setLastUpdate(gameUpdate);
      setGameUpdates(prev => [...prev, gameUpdate]);

      return {
        success: true,
        message: `üìù **–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"${reportText}"\n\n‚úÖ –ö—É–±–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.`,
        data: { report: reportText, planNumber: currentPlayer.plan },
        nextAction: 'enableDice'
      };
      
    } catch (error) {
      console.error('[useInngestChat] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      return { 
        success: false, 
        message: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      };
    } finally {
      setIsProcessing(false);
    }
  }, [user?.id, currentPlayer?.needsReport, currentPlayer?.plan]);

  // üéØ –ö–æ–º–∞–Ω–¥–∞: –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  const gameStatusCommand = useCallback(async (args: string[]): Promise<ChatCommandResult> => {
    if (!currentPlayer) {
      return { 
        success: true, 
        message: 'üéÆ **–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞.' 
      };
    }

    const statusMessage = `üéÆ **–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:**\n\n` +
      `üìç **–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** ${currentPlayer.plan}\n` +
      `üìä **–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω:** ${currentPlayer.previous_plan}\n` +
      `üé≤ **–ü–æ–¥—Ä—è–¥ —à–µ—Å—Ç–µ—Ä–æ–∫:** ${currentPlayer.consecutiveSixes}\n` +
      `üìù **–ù—É–∂–µ–Ω –æ—Ç—á–µ—Ç:** ${currentPlayer.needsReport ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `üèÅ **–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:** ${currentPlayer.isFinished ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${currentPlayer.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
      `üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
      `${currentPlayer.needsReport ? '‚Ä¢ \`/report [–≤–∞—à –æ—Ç—á–µ—Ç]\` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' : '‚Ä¢ \`/roll\` - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}\n` +
      `‚Ä¢ \`/status\` - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n` +
      `‚Ä¢ \`/plan\` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ`;

    return {
      success: true,
      message: statusMessage,
      data: currentPlayer
    };
  }, [currentPlayer]);

  // üöÄ –ö–æ–º–∞–Ω–¥–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
  const startGameCommand = useCallback(async (args: string[]): Promise<ChatCommandResult> => {
    if (!user?.id) {
      return { success: false, message: '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' };
    }

    if (currentPlayer) {
      return { 
        success: true, 
        message: `üéÆ –ò–≥—Ä–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n\n–í—ã –Ω–∞ –ø–ª–∞–Ω–µ ${currentPlayer.plan}.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/status\` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.` 
      };
    }

    try {
      setIsProcessing(true);
      
      console.log(`[useInngestChat] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞: ${user.id}`);
      
      const result = await InngestEventService.sendPlayerInit(user.id, user.email);
      
      if (!result.success) {
        return { 
          success: false, 
          message: `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${result.error}` 
        };
      }

      return {
        success: true,
        message: `üöÄ **–ò–≥—Ä–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!**\n\nüïâÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–≤—è—â–µ–Ω–Ω—É—é –∏–≥—Ä—É –õ–∏–ª–∞!\n\nüéØ –ë—Ä–æ—Å—å—Ç–µ 6, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º—É —Å–æ–∑–Ω–∞–Ω–∏—é.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/roll\` –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞.`,
        data: { userId: user.id, eventId: result.eventId },
        nextAction: 'enableDice'
      };
      
    } catch (error) {
      console.error('[useInngestChat] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      return { 
        success: false, 
        message: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      };
    } finally {
      setIsProcessing(false);
    }
  }, [user?.id, user?.email, currentPlayer]);

  // üìã –ö–æ–º–∞–Ω–¥–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ  
  const planInfoCommand = useCallback(async (args: string[]): Promise<ChatCommandResult> => {
    if (!currentPlayer) {
      return { success: false, message: '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π `/start`' };
    }

    const planNumber = args.length > 0 ? parseInt(args[0]) : Number(currentPlayer.plan);
    
    if (isNaN(planNumber) || planNumber < 1 || planNumber > 72) {
      return { 
        success: false, 
        message: '‚ùå –ù–æ–º–µ—Ä –ø–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 72.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/plan [–Ω–æ–º–µ—Ä]` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `/plan` –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞' 
      };
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const planMessage = `üìç **–ü–ª–∞–Ω ${planNumber}**\n\n` +
      `üéØ –≠—Ç–æ —ç—Ç–∞–ø –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é.\n` +
      `üí´ –ö–∞–∂–¥—ã–π –ø–ª–∞–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è.\n\n` +
      `${planNumber === Number(currentPlayer.plan) ? 'üî∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–¥–µ—Å—å —Å–µ–π—á–∞—Å' : 'üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω'}`;

    return {
      success: true,
      message: planMessage,
      data: { planNumber }
    };
  }, [currentPlayer]);

  // üéØ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  const commands: ChatCommand[] = [
    {
      command: '/start',
      description: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞',
      handler: startGameCommand
    },
    {
      command: '/roll',
      description: '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫',
      handler: rollDiceCommand,
      allowedStates: ['canRoll']
    },
    {
      command: '/report',
      description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
      handler: submitReportCommand,
      allowedStates: ['needsReport']
    },
    {
      command: '/status',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã',
      handler: gameStatusCommand
    },
    {
      command: '/plan',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ',
      handler: planInfoCommand
    }
  ];

  // üîç –ü–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥
  const parseCommand = useCallback((message: string): { command: string; args: string[] } | null => {
    const trimmed = message.trim();
    if (!trimmed.startsWith('/')) {
      return null;
    }

    const parts = trimmed.split(/\s+/);
    const command = parts[0].toLowerCase();
    const args = parts.slice(1);

    return { command, args };
  }, []);

  // üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
  const handleCommand = useCallback(async (message: string): Promise<ChatCommandResult | null> => {
    const parsed = parseCommand(message);
    if (!parsed) {
      return null;
    }

    const commandHandler = commands.find(cmd => cmd.command === parsed.command);
    if (!commandHandler) {
      return {
        success: false,
        message: `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${parsed.command}\n\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n${commands.map(cmd => `‚Ä¢ \`${cmd.command}\` - ${cmd.description}`).join('\n')}`
      };
    }

    console.log(`[useInngestChat] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${parsed.command}`, parsed.args);
    
    return await commandHandler.handler(parsed.args);
  }, [commands, parseCommand, rollDiceCommand, submitReportCommand, gameStatusCommand, startGameCommand, planInfoCommand]);

  // üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const getHelpMessage = useCallback((): string => {
    if (!user) {
      return `üïâÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroLeela!**\n\n` +
        `üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
        `‚Ä¢ \`/start\` - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è\n` +
        `‚Ä¢ \`/help\` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;
    }

    if (!currentPlayer) {
      return `üïâÔ∏è **–î—É—Ö–æ–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∂–¥–µ—Ç!**\n\n` +
        `üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
        `‚Ä¢ \`/start\` - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n` +
        `‚Ä¢ \`/help\` - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º`;
    }

    return `üïâÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º NeuroLeela:**\n\n` +
      `üéÆ **–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
      `${currentPlayer.needsReport ? '‚Ä¢ `/report [–≤–∞—à –æ—Ç—á–µ—Ç]` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' : '‚Ä¢ `/roll` - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}\n` +
      `‚Ä¢ \`/status\` - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n` +
      `‚Ä¢ \`/plan\` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ\n\n` +
      `üí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n` +
      `‚Ä¢ \`/help\` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
      `üéØ **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –ü–ª–∞–Ω ${currentPlayer.plan}, ${currentPlayer.needsReport ? '–Ω—É–∂–µ–Ω –æ—Ç—á–µ—Ç' : '–≥–æ—Ç–æ–≤ –∫ —Ö–æ–¥—É'}`;
  }, [user, currentPlayer]);

  // üîÑ –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (currentPlayer) {
      const gameUpdate: ChatGameUpdate = {
        type: 'playerStateChanged',
        data: currentPlayer,
        timestamp: Date.now()
      };
      
      setLastUpdate(gameUpdate);
    }
  }, [currentPlayer]);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    handleCommand,
    parseCommand,
    getHelpMessage,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isProcessing,
    lastUpdate,
    gameUpdates,
    commands,
    
    // –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    currentPlayer,
    user,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    clearUpdates: () => setGameUpdates([]),
    isCommand: (message: string) => message.trim().startsWith('/')
  };
}; 