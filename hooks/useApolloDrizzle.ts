import { useReactiveVar } from '@apollo/client';
import { currentPlayerVar, isLoadingVar, errorVar, loadPlayerData, updatePlayerPosition } from '@/lib/apollo-drizzle-client';
import { useEffect, useRef } from 'react';
import { useSupabase } from '@/context/supabase-provider';
import { Player } from '@/db/schema';

export const useApolloDrizzle = () => {
  const { user } = useSupabase();
  const currentPlayer = useReactiveVar(currentPlayerVar);
  const isLoading = useReactiveVar(isLoadingVar);
  const error = useReactiveVar(errorVar);
  const isMounted = useRef(true);

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('ÔøΩÔøΩ [useApolloDrizzle] –•—É–∫ –≤—ã–∑–≤–∞–Ω, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
  console.log('üîÑ [useApolloDrizzle] user:', user);
  console.log('üîÑ [useApolloDrizzle] currentPlayer:', currentPlayer);
  console.log('üîÑ [useApolloDrizzle] isLoading:', isLoading);
  console.log('üîÑ [useApolloDrizzle] error:', error);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è currentPlayer
  useEffect(() => {
    console.log('üî• [useApolloDrizzle] currentPlayer –ò–ó–ú–ï–ù–ò–õ–°–Ø!');
    console.log('üî• [useApolloDrizzle] –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ currentPlayer:', currentPlayer);
    if (currentPlayer) {
      console.log('üî• [useApolloDrizzle] –ü–ª–∞–Ω –∏–≥—Ä–æ–∫–∞:', currentPlayer.plan);
      console.log('üî• [useApolloDrizzle] isFinished:', currentPlayer.isFinished);
      console.log('üî• [useApolloDrizzle] needsReport:', currentPlayer.needsReport);
    }
  }, [currentPlayer]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    let isSubscribed = true;
    
    if (user) {
      console.log('üîÑ [useApolloDrizzle] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', user.id);
      const fetchData = async () => {
        try {
          await loadPlayerData(user.id);
        } catch (error) {
          console.error('Error loading player data:', error);
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
          if (isSubscribed && isMounted.current) {
            errorVar(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
          }
        }
      };
      
      fetchData();
    } else {
      console.log('üîÑ [useApolloDrizzle] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const testUserId = 'test-user-demo';
      const fetchData = async () => {
        try {
          await loadPlayerData(testUserId);
        } catch (error) {
          console.error('Error loading test player data:', error);
          if (isSubscribed && isMounted.current) {
            errorVar(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
          }
        }
      };
      
      fetchData();
    }
    
    return () => {
      isSubscribed = false;
    };
  }, [user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
  const movePlayer = async (newPosition: number, isFinishedFlag?: boolean) => {
    if (!isMounted.current) return;
    
    try {
      const currentPlayer = currentPlayerVar();
      if (!currentPlayer) {
        console.error('[Apollo Drizzle] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é');
        return;
      }
      
      const oldPosition = currentPlayer.plan;
      const previousIsFinished = currentPlayer.isFinished;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ isFinished:
      // 1. –ï—Å–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä isFinishedFlag, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      // 2. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const newIsFinished = isFinishedFlag !== undefined ? isFinishedFlag : previousIsFinished;
      
      console.log(`[Apollo Drizzle] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–æ–∑–∏—Ü–∏—è ${oldPosition} -> ${newPosition}, isFinished ${previousIsFinished} -> ${newIsFinished}`);
      
      // –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updatePlayerPosition –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ GameService —É–∂–µ –æ–±–Ω–æ–≤–∏–ª Supabase
      // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Apollo
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ñ–ª–∞–≥–æ–º isFinished
      const updatedPlayer = {...currentPlayer};
      updatedPlayer.plan = newPosition;
      updatedPlayer.previous_plan = oldPosition;
      updatedPlayer.isFinished = newIsFinished;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      if (newPosition === 68 && newIsFinished) {
        updatedPlayer.message = '–ü–æ–±–µ–¥–∞! üïâ –ë—Ä–æ—Å—å—Ç–µ 6, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
      } else if (newIsFinished) {
        updatedPlayer.message = '–ë—Ä–æ—Å—å—Ç–µ 6 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è';
      } else {
        updatedPlayer.message = '–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...';
      }
      
      currentPlayerVar(updatedPlayer);
      console.log('[Apollo Drizzle] –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedPlayer);
    } catch (error) {
      console.error('[Apollo Drizzle] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      if (isMounted.current) {
        errorVar(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const updatePlayerState = (updates: Partial<Player>) => {
    if (!isMounted.current) return;
    
    try {
      const currentPlayer = currentPlayerVar();
      if (!currentPlayer) {
        console.error('[Apollo Drizzle] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        return;
      }
      
      console.log('[Apollo Drizzle] –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', updates);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const updatedPlayer = { ...currentPlayer, ...updates };
      
      currentPlayerVar(updatedPlayer);
      console.log('[Apollo Drizzle] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedPlayer);
    } catch (error) {
      console.error('[Apollo Drizzle] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      if (isMounted.current) {
        errorVar(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      }
    }
  };

  return {
    currentPlayer,
    isLoading,
    error,
    movePlayer,
    updatePlayerState,
    loadPlayer: () => {
      if (user && isMounted.current) {
        return loadPlayerData(user.id);
      }
      return Promise.resolve();
    }
  };
}; 